{"remainingRequest":"D:\\桌面\\twitterpredict\\frontend\\node_modules\\babel-loader\\lib\\index.js!D:\\桌面\\twitterpredict\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\桌面\\twitterpredict\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\桌面\\twitterpredict\\frontend\\src\\views\\Dashboard.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\桌面\\twitterpredict\\frontend\\src\\views\\Dashboard.vue","mtime":1747146069930},{"path":"D:\\桌面\\twitterpredict\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1747130285089},{"path":"D:\\桌面\\twitterpredict\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1747130286327},{"path":"D:\\桌面\\twitterpredict\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1747130285089},{"path":"D:\\桌面\\twitterpredict\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1747130265551}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICogYXMgZWNoYXJ0cyBmcm9tICdlY2hhcnRzJzsKaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJzsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdEYXNoYm9hcmQnLAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBwcmljZUNoYXJ0OiBudWxsLAogICAgICBhaU1lc3NhZ2VzOiBbewogICAgICAgIHJvbGU6ICdhaScsCiAgICAgICAgY29udGVudDogJ+aCqOWlve+8geaIkeaYr+aCqOeahOWKoOWvhui0p+W4geaWsOmXu+WKqeaJi+OAguaCqOWPr+S7peivoumXruaIkeavlOeJueW4geebuOWFs+aWsOmXu+WSjOW4guWcuuWKqOaAgeOAguS+i+Wmgu+8jOWwneivlei+k+WFpSLmr5TnibnluIHmnIDmlrDmtojmga8i5oiWIuS7iuaXpeWKoOWvhui0p+W4geeDreeCuSLjgIInLAogICAgICAgIHRpbWU6IHRoaXMuZm9ybWF0VGltZShuZXcgRGF0ZSgpKQogICAgICB9XSwKICAgICAgcHJlZGljdGlvbk1lc3NhZ2VzOiBbewogICAgICAgIHJvbGU6ICdhaScsCiAgICAgICAgY29udGVudDogJ+asoui/juS9v+eUqOavlOeJueW4geS7t+agvOmihOa1i+WKn+iDveOAguaIkeWwhue7k+WQiOWunuaXtuS7t+agvOaVsOaNruWSjOaWsOmXu+aDheaEn+WIhuaekO+8jOS9v+eUqOiuree7g+WlveeahOaooeWei+S4uuaCqOaPkOS+m+mihOa1i+e7k+aenOOAguivt+i+k+WFpeaCqOaDs+imgemihOa1i+eahOaXtumXtOiMg+WbtO+8jOS+i+WmgiLpooTmtYvmnKrmnaUz5aSp55qE5q+U54m55biB5Lu35qC8IuOAgicsCiAgICAgICAgdGltZTogdGhpcy5mb3JtYXRUaW1lKG5ldyBEYXRlKCkpCiAgICAgIH1dLAogICAgICBhaUlucHV0TWVzc2FnZTogJycsCiAgICAgIHByZWRpY3Rpb25JbnB1dE1lc3NhZ2U6ICcnLAogICAgICBhaUxvYWRpbmc6IGZhbHNlLAogICAgICBwcmVkaWN0aW9uTG9hZGluZzogZmFsc2UsCiAgICAgIGJpdGNvaW5QcmljZXM6IFtdLAogICAgICBjdXJyZW50VXNlcjogewogICAgICAgIHVzZXJuYW1lOiAn55So5oi3JwogICAgICB9LAogICAgICB0aW1lUmFuZ2U6ICc3ZCcsCiAgICAgIC8vIOm7mOiupOaYvuekujflpKnmlbDmja4KICAgICAgbG9hZGluZzogewogICAgICAgIHByaWNlczogZmFsc2UsCiAgICAgICAgcHJlZGljdGlvbjogZmFsc2UKICAgICAgfSwKICAgICAgZXJyb3I6IG51bGwKICAgIH07CiAgfSwKICBtb3VudGVkKCkgewogICAgLy8g5LuOc3RvcmXojrflj5bnlKjmiLfkv6Hmga8KICAgIHRoaXMuY3VycmVudFVzZXIgPSB0aGlzLiRzdG9yZS5nZXR0ZXJzLmN1cnJlbnRVc2VyIHx8IHsKICAgICAgdXNlcm5hbWU6ICfnlKjmiLcnCiAgICB9OwoKICAgIC8vIOWIneWni+WMluS7t+agvOWbvuihqAogICAgdGhpcy5pbml0UHJpY2VDaGFydCgpOwoKICAgIC8vIOiOt+WPluavlOeJueW4geS7t+agvOaVsOaNrgogICAgdGhpcy5mZXRjaEJpdGNvaW5QcmljZXMoKTsKCiAgICAvLyDmu5rliqjogYrlpKnmoYbliLDlupXpg6gKICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHsKICAgICAgdGhpcy5zY3JvbGxDaGF0VG9Cb3R0b20oJ2NoYXRNZXNzYWdlcycpOwogICAgICB0aGlzLnNjcm9sbENoYXRUb0JvdHRvbSgncHJlZGljdGlvbk1lc3NhZ2VzJyk7CiAgICB9KTsKICB9LAogIHVwZGF0ZWQoKSB7CiAgICAvLyDlnKjnu4Tku7bmm7TmlrDlkI7kuZ/mu5rliqjliLDlupXpg6gKICAgIHRoaXMuc2Nyb2xsQ2hhdFRvQm90dG9tKCdjaGF0TWVzc2FnZXMnKTsKICAgIHRoaXMuc2Nyb2xsQ2hhdFRvQm90dG9tKCdwcmVkaWN0aW9uTWVzc2FnZXMnKTsKICB9LAogIG1ldGhvZHM6IHsKICAgIGluaXRQcmljZUNoYXJ0KCkgewogICAgICB0aGlzLnByaWNlQ2hhcnQgPSBlY2hhcnRzLmluaXQodGhpcy4kcmVmcy5wcmljZUNoYXJ0KTsKICAgICAgY29uc3Qgb3B0aW9uID0gewogICAgICAgIHRvb2x0aXA6IHsKICAgICAgICAgIHRyaWdnZXI6ICdheGlzJywKICAgICAgICAgIGZvcm1hdHRlcjogJ3tifTxiciAvPnthfToge2N9IFVTRCcKICAgICAgICB9LAogICAgICAgIHhBeGlzOiB7CiAgICAgICAgICB0eXBlOiAnY2F0ZWdvcnknLAogICAgICAgICAgZGF0YTogW10sCiAgICAgICAgICBheGlzVGljazogewogICAgICAgICAgICBhbGlnbldpdGhMYWJlbDogdHJ1ZQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgeUF4aXM6IHsKICAgICAgICAgIHR5cGU6ICd2YWx1ZScsCiAgICAgICAgICBzY2FsZTogdHJ1ZSwKICAgICAgICAgIG5hbWU6ICfku7fmoLwgKFVTRCknLAogICAgICAgICAgbmFtZUxvY2F0aW9uOiAnbWlkZGxlJywKICAgICAgICAgIG5hbWVHYXA6IDMwLAogICAgICAgICAgYXhpc0xhYmVsOiB7CiAgICAgICAgICAgIGZvcm1hdHRlcjogJ3t2YWx1ZX0gVVNEJwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgc2VyaWVzOiBbewogICAgICAgICAgbmFtZTogJ+avlOeJueW4geS7t+agvCcsCiAgICAgICAgICB0eXBlOiAnbGluZScsCiAgICAgICAgICBzbW9vdGg6IHRydWUsCiAgICAgICAgICBzeW1ib2w6ICdjaXJjbGUnLAogICAgICAgICAgc3ltYm9sU2l6ZTogOCwKICAgICAgICAgIGRhdGE6IFtdLAogICAgICAgICAgaXRlbVN0eWxlOiB7CiAgICAgICAgICAgIGNvbG9yOiAnI2Y3OTMxYScKICAgICAgICAgIH0sCiAgICAgICAgICBsaW5lU3R5bGU6IHsKICAgICAgICAgICAgd2lkdGg6IDMsCiAgICAgICAgICAgIHNoYWRvd0NvbG9yOiAncmdiYSgyNDcsIDE0NywgMjYsIDAuNSknLAogICAgICAgICAgICBzaGFkb3dCbHVyOiAxMAogICAgICAgICAgfSwKICAgICAgICAgIGFyZWFTdHlsZTogewogICAgICAgICAgICBjb2xvcjogewogICAgICAgICAgICAgIHR5cGU6ICdsaW5lYXInLAogICAgICAgICAgICAgIHg6IDAsCiAgICAgICAgICAgICAgeTogMCwKICAgICAgICAgICAgICB4MjogMCwKICAgICAgICAgICAgICB5MjogMSwKICAgICAgICAgICAgICBjb2xvclN0b3BzOiBbewogICAgICAgICAgICAgICAgb2Zmc2V0OiAwLAogICAgICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDI0NywgMTQ3LCAyNiwgMC41KScKICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICBvZmZzZXQ6IDEsCiAgICAgICAgICAgICAgICBjb2xvcjogJ3JnYmEoMjQ3LCAxNDcsIDI2LCAwLjEpJwogICAgICAgICAgICAgIH1dCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9XQogICAgICB9OwogICAgICB0aGlzLnByaWNlQ2hhcnQuc2V0T3B0aW9uKG9wdGlvbik7CgogICAgICAvLyDlk43lupTlvI/osIPmlbTlm77ooajlpKflsI8KICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsICgpID0+IHsKICAgICAgICB0aGlzLnByaWNlQ2hhcnQucmVzaXplKCk7CiAgICAgIH0pOwogICAgfSwKICAgIGFzeW5jIGZldGNoQml0Y29pblByaWNlcygpIHsKICAgICAgdGhpcy5sb2FkaW5nLnByaWNlcyA9IHRydWU7CiAgICAgIHRyeSB7CiAgICAgICAgLy8g5LuOQmluYW5jZSBBUEnojrflj5bmlbDmja4KICAgICAgICBsZXQgbGltaXQgPSAzMDsKICAgICAgICBsZXQgaW50ZXJ2YWwgPSAnMWQnOwogICAgICAgIGlmICh0aGlzLnRpbWVSYW5nZSA9PT0gJzFkJykgewogICAgICAgICAgaW50ZXJ2YWwgPSAnMWgnOwogICAgICAgICAgbGltaXQgPSAyNDsKICAgICAgICB9IGVsc2UgaWYgKHRoaXMudGltZVJhbmdlID09PSAnN2QnKSB7CiAgICAgICAgICBpbnRlcnZhbCA9ICc0aCc7CiAgICAgICAgICBsaW1pdCA9IDQyOyAvLyA35aSpICogNuS4qjTlsI/ml7bml7bmrrUKICAgICAgICB9IGVsc2UgaWYgKHRoaXMudGltZVJhbmdlID09PSAnMzBkJykgewogICAgICAgICAgaW50ZXJ2YWwgPSAnMWQnOwogICAgICAgICAgbGltaXQgPSAzMDsKICAgICAgICB9CiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQoYGh0dHBzOi8vYXBpLmJpbmFuY2UuY29tL2FwaS92My9rbGluZXM/c3ltYm9sPUJUQ1VTRFQmaW50ZXJ2YWw9JHtpbnRlcnZhbH0mbGltaXQ9JHtsaW1pdH1gKTsKCiAgICAgICAgLy8g5aSE55CGQmluYW5jZei/lOWbnueahOaVsOaNrgogICAgICAgIGNvbnN0IHByaWNlcyA9IHJlc3BvbnNlLmRhdGEubWFwKGl0ZW0gPT4gewogICAgICAgICAgY29uc3QgdGltZXN0YW1wID0gaXRlbVswXTsKICAgICAgICAgIGNvbnN0IGNsb3NlUHJpY2UgPSBwYXJzZUZsb2F0KGl0ZW1bNF0pOwogICAgICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHRpbWVzdGFtcCk7CgogICAgICAgICAgLy8g5qC55o2u5pe26Ze06IyD5Zu05qC85byP5YyW5pel5pyfCiAgICAgICAgICBsZXQgZm9ybWF0dGVkRGF0ZTsKICAgICAgICAgIGlmICh0aGlzLnRpbWVSYW5nZSA9PT0gJzFkJykgewogICAgICAgICAgICBmb3JtYXR0ZWREYXRlID0gYCR7ZGF0ZS5nZXRIb3VycygpfTowMGA7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBmb3JtYXR0ZWREYXRlID0gZGF0ZS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF07CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICBkYXRlOiBmb3JtYXR0ZWREYXRlLAogICAgICAgICAgICBwcmljZTogY2xvc2VQcmljZQogICAgICAgICAgfTsKICAgICAgICB9KTsKICAgICAgICB0aGlzLmJpdGNvaW5QcmljZXMgPSBwcmljZXM7CgogICAgICAgIC8vIOabtOaWsOS7t+agvOWbvuihqAogICAgICAgIGNvbnN0IGRhdGVzID0gcHJpY2VzLm1hcChpdGVtID0+IGl0ZW0uZGF0ZSk7CiAgICAgICAgY29uc3QgcHJpY2VWYWx1ZXMgPSBwcmljZXMubWFwKGl0ZW0gPT4gaXRlbS5wcmljZSk7CiAgICAgICAgdGhpcy5wcmljZUNoYXJ0LnNldE9wdGlvbih7CiAgICAgICAgICB4QXhpczogewogICAgICAgICAgICBkYXRhOiBkYXRlcwogICAgICAgICAgfSwKICAgICAgICAgIHNlcmllczogW3sKICAgICAgICAgICAgZGF0YTogcHJpY2VWYWx1ZXMKICAgICAgICAgIH1dCiAgICAgICAgfSk7CiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgY29uc29sZS5lcnJvcign6I635Y+W5q+U54m55biB5Lu35qC85pWw5o2u5aSx6LSlOicsIGVycm9yKTsKICAgICAgICB0aGlzLmVycm9yID0gJ+iOt+WPluS7t+agvOaVsOaNruWksei0pe+8jOivt+eojeWQjumHjeivlSc7CiAgICAgICAgLy8g5L2/55So5qih5ouf5pWw5o2u5L2c5Li65aSH6YCJCiAgICAgICAgYXdhaXQgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2ZldGNoQml0Y29pblByaWNlcycpOwogICAgICAgIGNvbnN0IHByaWNlcyA9IHRoaXMuJHN0b3JlLmdldHRlcnMuYml0Y29pblByaWNlczsKICAgICAgICBpZiAocHJpY2VzICYmIHByaWNlcy5sZW5ndGgpIHsKICAgICAgICAgIHRoaXMuYml0Y29pblByaWNlcyA9IHByaWNlczsKICAgICAgICAgIGNvbnN0IGRhdGVzID0gcHJpY2VzLm1hcChpdGVtID0+IGl0ZW0uZGF0ZSk7CiAgICAgICAgICBjb25zdCBwcmljZVZhbHVlcyA9IHByaWNlcy5tYXAoaXRlbSA9PiBpdGVtLnByaWNlKTsKICAgICAgICAgIHRoaXMucHJpY2VDaGFydC5zZXRPcHRpb24oewogICAgICAgICAgICB4QXhpczogewogICAgICAgICAgICAgIGRhdGE6IGRhdGVzCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNlcmllczogW3sKICAgICAgICAgICAgICBkYXRhOiBwcmljZVZhbHVlcwogICAgICAgICAgICB9XQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9IGZpbmFsbHkgewogICAgICAgIHRoaXMubG9hZGluZy5wcmljZXMgPSBmYWxzZTsKICAgICAgfQogICAgfSwKICAgIHJlZnJlc2hEYXRhKCkgewogICAgICB0aGlzLmZldGNoQml0Y29pblByaWNlcygpOwogICAgICB0aGlzLiRtZXNzYWdlKHsKICAgICAgICBtZXNzYWdlOiAn5pWw5o2u5bey5Yi35pawJywKICAgICAgICB0eXBlOiAnc3VjY2VzcycKICAgICAgfSk7CiAgICB9LAogICAgY2hhbmdlVGltZVJhbmdlKHJhbmdlKSB7CiAgICAgIHRoaXMudGltZVJhbmdlID0gcmFuZ2U7CiAgICAgIHRoaXMuZmV0Y2hCaXRjb2luUHJpY2VzKCk7CiAgICB9LAogICAgZm9ybWF0VGltZShkYXRlKSB7CiAgICAgIGNvbnN0IGhvdXJzID0gZGF0ZS5nZXRIb3VycygpLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgJzAnKTsKICAgICAgY29uc3QgbWludXRlcyA9IGRhdGUuZ2V0TWludXRlcygpLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgJzAnKTsKICAgICAgcmV0dXJuIGAke2hvdXJzfToke21pbnV0ZXN9YDsKICAgIH0sCiAgICBzY3JvbGxDaGF0VG9Cb3R0b20ocmVmKSB7CiAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLiRyZWZzW3JlZl07CiAgICAgIGlmIChlbGVtZW50KSB7CiAgICAgICAgLy8g5L2/55Soc2V0VGltZW91dOehruS/nURPTeabtOaWsOWQjuWGjea7muWKqAogICAgICAgIHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgICAgZWxlbWVudC5zY3JvbGxUb3AgPSBlbGVtZW50LnNjcm9sbEhlaWdodDsKICAgICAgICB9LCAxMDApOwogICAgICB9CiAgICB9LAogICAgYXN5bmMgc2VuZEFpTWVzc2FnZSgpIHsKICAgICAgaWYgKCF0aGlzLmFpSW5wdXRNZXNzYWdlLnRyaW0oKSkgcmV0dXJuOwoKICAgICAgLy8g5re75Yqg55So5oi35raI5oGvCiAgICAgIHRoaXMuYWlNZXNzYWdlcy5wdXNoKHsKICAgICAgICByb2xlOiAndXNlcicsCiAgICAgICAgY29udGVudDogdGhpcy5haUlucHV0TWVzc2FnZSwKICAgICAgICB0aW1lOiB0aGlzLmZvcm1hdFRpbWUobmV3IERhdGUoKSkKICAgICAgfSk7CgogICAgICAvLyDmuIXnqbrovpPlhaXmoYblubbmu5rliqjliLDlupXpg6gKICAgICAgY29uc3QgdXNlck1lc3NhZ2UgPSB0aGlzLmFpSW5wdXRNZXNzYWdlOwogICAgICB0aGlzLmFpSW5wdXRNZXNzYWdlID0gJyc7CiAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHsKICAgICAgICB0aGlzLnNjcm9sbENoYXRUb0JvdHRvbSgnY2hhdE1lc3NhZ2VzJyk7CiAgICAgIH0pOwogICAgICB0aGlzLmFpTG9hZGluZyA9IHRydWU7CiAgICAgIHRyeSB7CiAgICAgICAgLy8g5qOA5p+l5piv5ZCm5piv6K+i6Zeu5q+U54m55biB5paw6Ze755qE6K+35rGCCiAgICAgICAgY29uc3QgaXNOZXdzUXVlcnkgPSB1c2VyTWVzc2FnZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCfmr5TnibnluIEnKSAmJiAodXNlck1lc3NhZ2UudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygn5paw6Ze7JykgfHwgdXNlck1lc3NhZ2UudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygn5raI5oGvJykgfHwgdXNlck1lc3NhZ2UudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygn5pyA5pawJykgfHwgdXNlck1lc3NhZ2UudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygn54Ot54K5JykgfHwgdXNlck1lc3NhZ2UudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygn6LaL5Yq/JykpOwogICAgICAgIGxldCByZXNwb25zZSA9ICcnOwogICAgICAgIGlmIChpc05ld3NRdWVyeSkgewogICAgICAgICAgLy8g5aaC5p6c5piv5paw6Ze75p+l6K+i77yM6LCD55So5ZCO56uvQVBJ6I635Y+W5pyA5paw5q+U54m55biB5paw6Ze7CiAgICAgICAgICB0cnkgewogICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBheGlvcy5nZXQoJy9hcGkvbmV3cycpOwogICAgICAgICAgICBpZiAocmVzdWx0LmRhdGEgJiYgcmVzdWx0LmRhdGEubmV3cyAmJiByZXN1bHQuZGF0YS5uZXdzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAvLyDmoLzlvI/ljJbmlrDpl7vkv6Hmga8KICAgICAgICAgICAgICBjb25zdCBuZXdzTGlzdCA9IHJlc3VsdC5kYXRhLm5ld3M7CiAgICAgICAgICAgICAgY29uc3QgbmV3c1RleHQgPSBuZXdzTGlzdC5tYXAobmV3cyA9PiBg5qCH6aKYOiAke25ld3MudGl0bGV9XG7mnaXmupA6ICR7bmV3cy5zb3VyY2V9XG7pk77mjqU6ICR7bmV3cy51cmx9XG5gKS5qb2luKCdcbicpOwogICAgICAgICAgICAgIGNvbnN0IHNlbnRpbWVudCA9IHJlc3VsdC5kYXRhLnNlbnRpbWVudF9zY29yZTsKICAgICAgICAgICAgICBsZXQgc2VudGltZW50VGV4dCA9ICfkuK3mgKcnOwogICAgICAgICAgICAgIGlmIChzZW50aW1lbnQgPiAwLjMpIHNlbnRpbWVudFRleHQgPSAn56ev5p6BJztlbHNlIGlmIChzZW50aW1lbnQgPCAtMC4zKSBzZW50aW1lbnRUZXh0ID0gJ+a2iOaegSc7CiAgICAgICAgICAgICAgcmVzcG9uc2UgPSBg5Lul5LiL5piv5pyA5paw5q+U54m55biB55u45YWz5paw6Ze7ICjluILlnLrmg4Xnu6rvvJoke3NlbnRpbWVudFRleHR9LCDmjIfmlbDvvJoke3NlbnRpbWVudC50b0ZpeGVkKDIpfSnvvJpcblxuJHtuZXdzVGV4dH1gOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHJlc3BvbnNlID0gJ+aKseatie+8jOebruWJjeaXoOazleiOt+WPluavlOeJueW4geaWsOmXu+aVsOaNruOAguivt+eojeWQjuWGjeivleOAgic7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgY29uc29sZS5lcnJvcign6I635Y+W5paw6Ze7QVBJ5aSx6LSlOicsIGUpOwogICAgICAgICAgICByZXNwb25zZSA9ICfmirHmrYnvvIzojrflj5bmr5TnibnluIHmlrDpl7vml7blh7rnjrDpl67popjjgILor7fnqI3lkI7lho3or5XjgIInOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAvLyDlpoLmnpzkuI3mmK/mlrDpl7vmn6Xor6LvvIzmj5DkvpvkuIDoiKzlr7nor53lm57lpI0KICAgICAgICAgIGlmICh1c2VyTWVzc2FnZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCfkvaDlpb0nKSB8fCB1c2VyTWVzc2FnZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCfll6gnKSB8fCB1c2VyTWVzc2FnZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdoaScpKSB7CiAgICAgICAgICAgIHJlc3BvbnNlID0gJ+aCqOWlve+8geaIkeaYr+aCqOeahOWKoOWvhui0p+W4geWKqeaJi+OAguaCqOWPr+S7peivoumXruaIkeavlOeJueW4geebuOWFs+eahOaWsOmXu+WSjOW4guWcuuWKqOaAge+8jOS5n+WPr+S7peS4juaIkeiBiuiBiuWFtuS7luivnemimOOAgic7CiAgICAgICAgICB9IGVsc2UgaWYgKHVzZXJNZXNzYWdlLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ+S9oOaYr+iwgScpIHx8IHVzZXJNZXNzYWdlLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ+S9oOiDveWBmuS7gOS5iCcpKSB7CiAgICAgICAgICAgIHJlc3BvbnNlID0gJ+aIkeaYr+S4gOS4quWKoOWvhui0p+W4geWKqeaJi++8jOWPr+S7peS4uuaCqOaPkOS+m+avlOeJueW4geebuOWFs+aWsOmXu+WSjOS/oeaBr+OAguaCqOWPr+S7peWQkeaIkeivoumXriLmnIDmlrDmr5TnibnluIHmlrDpl7si5oiWIuavlOeJueW4geW4guWcuui2i+WKvyLnrYnpl67popjvvIzmiJHkvJrlsJ3or5XkuLrmgqjojrflj5bnm7jlhbPkv6Hmga/jgIInOwogICAgICAgICAgfSBlbHNlIGlmICh1c2VyTWVzc2FnZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCfku7fmoLwnKSB8fCB1c2VyTWVzc2FnZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCflpJrlsJHpkrEnKSkgewogICAgICAgICAgICByZXNwb25zZSA9ICfmgqjlj6/ku6XlnKjpobXpnaLkuIrmlrnnmoTku7fmoLzlm77ooajkuK3mn6XnnIvmr5TnibnluIHnmoTmnIDmlrDku7fmoLzotbDlir/jgILlpoLmnpzmgqjmg7Pkuobop6PmnKrmnaXku7fmoLzpooTmtYvvvIzlj6/ku6Xkvb/nlKjlj7PkvqfnmoTku7fmoLzpooTmtYvlip/og73jgIInOwogICAgICAgICAgfSBlbHNlIGlmICh1c2VyTWVzc2FnZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCfosKLosKInKSB8fCB1c2VyTWVzc2FnZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCfmhJ/osKInKSkgewogICAgICAgICAgICByZXNwb25zZSA9ICfkuI3lrqLmsJTvvIHlpoLmnpzmgqjmnInlhbbku5bpl67popjvvIzpmo/ml7blj6/ku6XlkJHmiJHlkqjor6LjgIInOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVzcG9uc2UgPSAn5oiR55CG6Kej5oKo5oOz5LqG6Kej5pu05aSa5L+h5oGv44CC5aaC5p6c5oKo5oOz6I635Y+W5pyA5paw55qE5q+U54m55biB5paw6Ze777yM5Y+v5Lul55u05o6l6K+i6ZeuIuacgOaWsOavlOeJueW4geaWsOmXuyLjgILmgqjkuZ/lj6/ku6Xkvb/nlKjlj7PkvqfnmoTku7fmoLzpooTmtYvlip/og73mnaXpooTmtYvmnKrmnaXku7fmoLzotbDlir/jgIInOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8g5re75YqgQUnlm57lpI0KICAgICAgICB0aGlzLmFpTWVzc2FnZXMucHVzaCh7CiAgICAgICAgICByb2xlOiAnYWknLAogICAgICAgICAgY29udGVudDogcmVzcG9uc2UsCiAgICAgICAgICB0aW1lOiB0aGlzLmZvcm1hdFRpbWUobmV3IERhdGUoKSkKICAgICAgICB9KTsKICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICBjb25zb2xlLmVycm9yKCflpITnkIbmtojmga/lpLHotKU6JywgZXJyb3IpOwogICAgICAgIHRoaXMuYWlNZXNzYWdlcy5wdXNoKHsKICAgICAgICAgIHJvbGU6ICdhaScsCiAgICAgICAgICBjb250ZW50OiAn5oqx5q2J77yM5aSE55CG5oKo55qE6K+35rGC5pe25Ye6546w5LqG6Zeu6aKY44CC6K+356iN5ZCO6YeN6K+V44CCJywKICAgICAgICAgIHRpbWU6IHRoaXMuZm9ybWF0VGltZShuZXcgRGF0ZSgpKQogICAgICAgIH0pOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIHRoaXMuYWlMb2FkaW5nID0gZmFsc2U7CiAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gewogICAgICAgICAgdGhpcy5zY3JvbGxDaGF0VG9Cb3R0b20oJ2NoYXRNZXNzYWdlcycpOwogICAgICAgIH0pOwogICAgICB9CiAgICB9LAogICAgYXN5bmMgc2VuZFByZWRpY3Rpb25SZXF1ZXN0KCkgewogICAgICBpZiAoIXRoaXMucHJlZGljdGlvbklucHV0TWVzc2FnZS50cmltKCkpIHJldHVybjsKCiAgICAgIC8vIOa3u+WKoOeUqOaIt+a2iOaBrwogICAgICB0aGlzLnByZWRpY3Rpb25NZXNzYWdlcy5wdXNoKHsKICAgICAgICByb2xlOiAndXNlcicsCiAgICAgICAgY29udGVudDogdGhpcy5wcmVkaWN0aW9uSW5wdXRNZXNzYWdlLAogICAgICAgIHRpbWU6IHRoaXMuZm9ybWF0VGltZShuZXcgRGF0ZSgpKQogICAgICB9KTsKCiAgICAgIC8vIOa4heepuui+k+WFpeahhuW5tua7muWKqOWIsOW6lemDqAogICAgICBjb25zdCB1c2VyTWVzc2FnZSA9IHRoaXMucHJlZGljdGlvbklucHV0TWVzc2FnZTsKICAgICAgdGhpcy5wcmVkaWN0aW9uSW5wdXRNZXNzYWdlID0gJyc7CiAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHsKICAgICAgICB0aGlzLnNjcm9sbENoYXRUb0JvdHRvbSgncHJlZGljdGlvbk1lc3NhZ2VzJyk7CiAgICAgIH0pOwogICAgICB0aGlzLnByZWRpY3Rpb25Mb2FkaW5nID0gdHJ1ZTsKICAgICAgdHJ5IHsKICAgICAgICAvLyDop6PmnpDnlKjmiLfmtojmga/vvIznoa7lrprpooTmtYvlpKnmlbAKICAgICAgICBsZXQgZGF5cyA9IDc7IC8vIOm7mOiupOmihOa1izflpKkKICAgICAgICBpZiAodXNlck1lc3NhZ2UuaW5jbHVkZXMoJzPlpKknKSB8fCB1c2VyTWVzc2FnZS5pbmNsdWRlcygn5LiJ5aSpJykpIHsKICAgICAgICAgIGRheXMgPSAzOwogICAgICAgIH0gZWxzZSBpZiAodXNlck1lc3NhZ2UuaW5jbHVkZXMoJ+S4gOWRqCcpIHx8IHVzZXJNZXNzYWdlLmluY2x1ZGVzKCc35aSpJykpIHsKICAgICAgICAgIGRheXMgPSA3OwogICAgICAgIH0gZWxzZSBpZiAodXNlck1lc3NhZ2UuaW5jbHVkZXMoJ+S4pOWRqCcpIHx8IHVzZXJNZXNzYWdlLmluY2x1ZGVzKCcxNOWkqScpKSB7CiAgICAgICAgICBkYXlzID0gMTQ7CiAgICAgICAgfSBlbHNlIGlmICh1c2VyTWVzc2FnZS5pbmNsdWRlcygnMzDlpKknKSB8fCB1c2VyTWVzc2FnZS5pbmNsdWRlcygn5LiA5Liq5pyIJykpIHsKICAgICAgICAgIGRheXMgPSAzMDsKICAgICAgICB9CgogICAgICAgIC8vIOWFiOiOt+WPluaDheaEn+WIhuaekOaVsOaNrgogICAgICAgIGxldCBzZW50aW1lbnRTY29yZSA9IDA7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIGNvbnN0IG5ld3NSZXN1bHQgPSBhd2FpdCBheGlvcy5nZXQoJy9hcGkvbmV3cycpOwogICAgICAgICAgaWYgKG5ld3NSZXN1bHQuZGF0YSAmJiBuZXdzUmVzdWx0LmRhdGEuc2VudGltZW50X3Njb3JlICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgc2VudGltZW50U2NvcmUgPSBuZXdzUmVzdWx0LmRhdGEuc2VudGltZW50X3Njb3JlOwogICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ+iOt+WPluaDheaEn+WIhuaekOaVsOaNruWksei0pTonLCBlKTsKICAgICAgICB9CgogICAgICAgIC8vIOiOt+WPluacgOaWsOS7t+agvOaVsOaNruS9nOS4uui+k+WFpeWPguaVsAogICAgICAgIGxldCBwcmljZURhdGEgPSBudWxsOwogICAgICAgIHRyeSB7CiAgICAgICAgICBjb25zdCBwcmljZVJlc3VsdCA9IGF3YWl0IGF4aW9zLmdldCgnL2FwaS9iaXRjb2luL3ByaWNlcycpOwogICAgICAgICAgaWYgKHByaWNlUmVzdWx0LmRhdGEgJiYgcHJpY2VSZXN1bHQuZGF0YS5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIC8vIOS9v+eUqOacgOaWsOeahOS7t+agvOaVsOaNrgogICAgICAgICAgICBwcmljZURhdGEgPSBwcmljZVJlc3VsdC5kYXRhWzBdOwogICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ+iOt+WPluS7t+agvOaVsOaNruWksei0pTonLCBlKTsKICAgICAgICB9CgogICAgICAgIC8vIOiwg+eUqOmihOa1i0FQSe+8jOS8oOmAkuaJgOacieW/heimgeWPguaVsAogICAgICAgIGxldCBwcmVkaWN0aW9uUmVzdWx0ID0gbnVsbDsKICAgICAgICB0cnkgewogICAgICAgICAgY29uc3QgcGFyYW1zID0gewogICAgICAgICAgICBkYXlzLAogICAgICAgICAgICBzZW50aW1lbnRfc2NvcmU6IHNlbnRpbWVudFNjb3JlCiAgICAgICAgICB9OwoKICAgICAgICAgIC8vIOWmguaenOacieS7t+agvOaVsOaNru+8jOa3u+WKoOWIsOWPguaVsOS4rQogICAgICAgICAgaWYgKHByaWNlRGF0YSkgewogICAgICAgICAgICBwYXJhbXMucHJpY2VfZGF0YSA9IHByaWNlRGF0YTsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MucG9zdCgnL2FwaS9iaXRjb2luL3ByZWRpY3QnLCBwYXJhbXMpOwogICAgICAgICAgcHJlZGljdGlvblJlc3VsdCA9IHJlc3BvbnNlLmRhdGE7CiAgICAgICAgICBpZiAoIXByZWRpY3Rpb25SZXN1bHQgfHwgIXByZWRpY3Rpb25SZXN1bHQuZGF0ZXMgfHwgIXByZWRpY3Rpb25SZXN1bHQucHJpY2VzKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcign6aKE5rWL57uT5p6c5qC85byP5LiN5q2j56GuJyk7CiAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgY29uc29sZS5lcnJvcign6LCD55So6aKE5rWLQVBJ5aSx6LSlOicsIGUpOwogICAgICAgICAgdGhpcy5wcmVkaWN0aW9uTWVzc2FnZXMucHVzaCh7CiAgICAgICAgICAgIHJvbGU6ICdhaScsCiAgICAgICAgICAgIGNvbnRlbnQ6ICfmirHmrYnvvIzpooTmtYvmnI3liqHmmoLml7bkuI3lj6/nlKjjgILmiJHku6znmoTpooTmtYvmqKHlnovpnIDopoHnu5PlkIjmnIDmlrDku7fmoLzmlbDmja7lkozmlrDpl7vmg4XmhJ/liIbmnpDmnaXmj5Dkvpvlh4bnoa7nmoTpooTmtYvjgILor7fnqI3lkI7lho3or5XjgIInLAogICAgICAgICAgICB0aW1lOiB0aGlzLmZvcm1hdFRpbWUobmV3IERhdGUoKSkKICAgICAgICAgIH0pOwogICAgICAgICAgdGhpcy5wcmVkaWN0aW9uTG9hZGluZyA9IGZhbHNlOwogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgLy8g5aSE55CG6aKE5rWL57uT5p6cCiAgICAgICAgY29uc3QgZm9ybWF0dGVkUmVzdWx0cyA9IHByZWRpY3Rpb25SZXN1bHQuZGF0ZXMubWFwKChkYXRlLCBpbmRleCkgPT4gewogICAgICAgICAgLy8g6K6h566X5LiO5b2T5YmN5Lu35qC855qE55m+5YiG5q+U5Y+Y5YyWCiAgICAgICAgICBjb25zdCBjdXJyZW50UHJpY2UgPSBwcmVkaWN0aW9uUmVzdWx0LmN1cnJlbnRfcHJpY2UgfHwgNTgwMDA7CiAgICAgICAgICBjb25zdCBwcmljZUNoYW5nZSA9ICgocHJlZGljdGlvblJlc3VsdC5wcmljZXNbaW5kZXhdIC0gY3VycmVudFByaWNlKSAvIGN1cnJlbnRQcmljZSAqIDEwMCkudG9GaXhlZCgyKTsKICAgICAgICAgIGNvbnN0IGNoYW5nZVN5bWJvbCA9IHByaWNlQ2hhbmdlID49IDAgPyAnKycgOiAnJzsKICAgICAgICAgIHJldHVybiBgJHtkYXRlfTogJHtwcmVkaWN0aW9uUmVzdWx0LnByaWNlc1tpbmRleF0udG9GaXhlZCgyKX0gVVNEICgke2NoYW5nZVN5bWJvbH0ke3ByaWNlQ2hhbmdlfSUpYDsKICAgICAgICB9KS5qb2luKCdcbicpOwoKICAgICAgICAvLyDnlJ/miJDliIbmnpDnu5PorroKICAgICAgICBjb25zdCBsYXN0UHJpY2UgPSBwcmVkaWN0aW9uUmVzdWx0LnByaWNlc1twcmVkaWN0aW9uUmVzdWx0LnByaWNlcy5sZW5ndGggLSAxXTsKICAgICAgICBjb25zdCBmaXJzdFByaWNlID0gcHJlZGljdGlvblJlc3VsdC5wcmljZXNbMF07CiAgICAgICAgY29uc3QgdHJlbmQgPSBsYXN0UHJpY2UgPiBmaXJzdFByaWNlID8gJ+S4iuWNhycgOiAn5LiL6ZmNJzsKICAgICAgICBjb25zdCBjb25maWRlbmNlID0gTWF0aC5mbG9vcig2NSArIE1hdGgucmFuZG9tKCkgKiAyMCk7CgogICAgICAgIC8vIOa3u+WKoOaDheaEn+WIhuaekOe7k+aenAogICAgICAgIGxldCBzZW50aW1lbnRJbmZvID0gJyc7CiAgICAgICAgaWYgKHByZWRpY3Rpb25SZXN1bHQuc2VudGltZW50X3Njb3JlICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgIGxldCBzZW50aW1lbnRUZXh0ID0gJ+S4reaApyc7CiAgICAgICAgICBpZiAocHJlZGljdGlvblJlc3VsdC5zZW50aW1lbnRfc2NvcmUgPiAwLjMpIHNlbnRpbWVudFRleHQgPSAn56ev5p6BJztlbHNlIGlmIChwcmVkaWN0aW9uUmVzdWx0LnNlbnRpbWVudF9zY29yZSA8IC0wLjMpIHNlbnRpbWVudFRleHQgPSAn5raI5p6BJzsKICAgICAgICAgIHNlbnRpbWVudEluZm8gPSBgXG5cbuW4guWcuuaDhee7quWIhuaekO+8miR7c2VudGltZW50VGV4dH0gKCR7cHJlZGljdGlvblJlc3VsdC5zZW50aW1lbnRfc2NvcmUudG9GaXhlZCgyKX0pYDsKICAgICAgICB9IGVsc2UgaWYgKHNlbnRpbWVudFNjb3JlKSB7CiAgICAgICAgICBsZXQgc2VudGltZW50VGV4dCA9ICfkuK3mgKcnOwogICAgICAgICAgaWYgKHNlbnRpbWVudFNjb3JlID4gMC4zKSBzZW50aW1lbnRUZXh0ID0gJ+enr+aegSc7ZWxzZSBpZiAoc2VudGltZW50U2NvcmUgPCAtMC4zKSBzZW50aW1lbnRUZXh0ID0gJ+a2iOaegSc7CiAgICAgICAgICBzZW50aW1lbnRJbmZvID0gYFxuXG7luILlnLrmg4Xnu6rliIbmnpDvvJoke3NlbnRpbWVudFRleHR9ICgke3NlbnRpbWVudFNjb3JlLnRvRml4ZWQoMil9KWA7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYOagueaNruWOhuWPsuS7t+agvOaVsOaNruOAgeW4guWcuuaDhee7quWIhuaekOWSjOaIkeS7rOeahOmihOa1i+aooeWei++8jOavlOeJueW4geS7t+agvOmihOa1i+e7k+aenOWmguS4i++8mlxuXG4ke2Zvcm1hdHRlZFJlc3VsdHN9JHtzZW50aW1lbnRJbmZvfVxuXG7pooTmtYvotovlir/vvJoke3RyZW5kfVxu572u5L+h5bqm77yaJHtjb25maWRlbmNlfSVcblxu5b2x5ZON5Zug57Sg5YiG5p6Q77yaXG4xLiDlvZPliY3luILlnLrmlbTkvZPlpITkuo4ke3RyZW5kID09PSAn5LiK5Y2HJyA/ICflgY/lkJHnp6/mnoEnIDogJ+iwqOaFjuinguacmyd95oOF57uqXG4yLiDmioDmnK/mjIfmoIfmmL7npLrnn63mnJ/lhoXlj6/og70ke3RyZW5kID09PSAn5LiK5Y2HJyA/ICfnu6fnu63kuIrooYwnIDogJ+acieWbnuiwg+WOi+WKmyd9XG4zLiDmnIDmlrDmtojmga/lr7nluILlnLrlvbHlk40ke3RyZW5kID09PSAn5LiK5Y2HJyA/ICflgY/mraPpnaInIDogJ+S4reaAp+WBj+i0n+mdoid9XG5cbuivt+azqOaEj++8jOi/meWPquaYr+WfuuS6juWOhuWPsuaVsOaNrueahOmihOa1i++8jOWunumZheW4guWcuuWPr+iDveWPl+WkmuenjeWboOe0oOW9seWTjeiAjOWPmOWMluOAgmA7CgogICAgICAgIC8vIOa3u+WKoEFJ5Zue5aSNCiAgICAgICAgdGhpcy5wcmVkaWN0aW9uTWVzc2FnZXMucHVzaCh7CiAgICAgICAgICByb2xlOiAnYWknLAogICAgICAgICAgY29udGVudDogcmVzcG9uc2UsCiAgICAgICAgICB0aW1lOiB0aGlzLmZvcm1hdFRpbWUobmV3IERhdGUoKSkKICAgICAgICB9KTsKICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICBjb25zb2xlLmVycm9yKCfpooTmtYvor7fmsYLlpLHotKU6JywgZXJyb3IpOwogICAgICAgIHRoaXMucHJlZGljdGlvbk1lc3NhZ2VzLnB1c2goewogICAgICAgICAgcm9sZTogJ2FpJywKICAgICAgICAgIGNvbnRlbnQ6ICfmirHmrYnvvIzpooTmtYvmnI3liqHmmoLml7bkuI3lj6/nlKjjgILor7fnqI3lkI7ph43or5XjgIInLAogICAgICAgICAgdGltZTogdGhpcy5mb3JtYXRUaW1lKG5ldyBEYXRlKCkpCiAgICAgICAgfSk7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgdGhpcy5wcmVkaWN0aW9uTG9hZGluZyA9IGZhbHNlOwogICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHsKICAgICAgICAgIHRoaXMuc2Nyb2xsQ2hhdFRvQm90dG9tKCdwcmVkaWN0aW9uTWVzc2FnZXMnKTsKICAgICAgICB9KTsKICAgICAgfQogICAgfSwKICAgIGxvZ291dCgpIHsKICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2xvZ291dCcpOwogICAgICB0aGlzLiRyb3V0ZXIucHVzaCgnLycpOwogICAgfQogIH0KfTs="},{"version":3,"names":["echarts","axios","name","data","priceChart","aiMessages","role","content","time","formatTime","Date","predictionMessages","aiInputMessage","predictionInputMessage","aiLoading","predictionLoading","bitcoinPrices","currentUser","username","timeRange","loading","prices","prediction","error","mounted","$store","getters","initPriceChart","fetchBitcoinPrices","$nextTick","scrollChatToBottom","updated","methods","init","$refs","option","tooltip","trigger","formatter","xAxis","type","axisTick","alignWithLabel","yAxis","scale","nameLocation","nameGap","axisLabel","series","smooth","symbol","symbolSize","itemStyle","color","lineStyle","width","shadowColor","shadowBlur","areaStyle","x","y","x2","y2","colorStops","offset","setOption","window","addEventListener","resize","limit","interval","response","get","map","item","timestamp","closePrice","parseFloat","date","formattedDate","getHours","toISOString","split","price","dates","priceValues","console","dispatch","length","refreshData","$message","message","changeTimeRange","range","hours","toString","padStart","minutes","getMinutes","ref","element","setTimeout","scrollTop","scrollHeight","sendAiMessage","trim","push","userMessage","isNewsQuery","toLowerCase","includes","result","news","newsList","newsText","title","source","url","join","sentiment","sentiment_score","sentimentText","toFixed","e","sendPredictionRequest","days","sentimentScore","newsResult","undefined","priceData","priceResult","predictionResult","params","price_data","post","Error","formattedResults","index","currentPrice","current_price","priceChange","changeSymbol","lastPrice","firstPrice","trend","confidence","Math","floor","random","sentimentInfo","logout","$router"],"sources":["src/views/Dashboard.vue"],"sourcesContent":["<template>\r\n  <div class=\"dashboard-container\">\r\n    <el-header class=\"header\">\r\n      <div class=\"logo\">\r\n        <img src=\"../assets/bitcoin-logo.png\" alt=\"比特币标志\" class=\"bitcoin-logo\">\r\n        <span>比特币价格预测平台</span>\r\n      </div>\r\n      <div class=\"user-info\">\r\n        <span>欢迎，{{ currentUser.username }}</span>\r\n        <el-button type=\"text\" @click=\"logout\">退出登录</el-button>\r\n      </div>\r\n    </el-header>\r\n    \r\n    <el-main class=\"main-content\">\r\n      <!-- 价格走势图 -->\r\n      <el-card class=\"chart-card\">\r\n        <div slot=\"header\" class=\"chart-header\">\r\n          <span>比特币价格走势（最近7天）</span>\r\n          <div>\r\n            <el-radio-group v-model=\"timeRange\" size=\"small\" @change=\"changeTimeRange\" style=\"margin-right: 15px;\">\r\n              <el-radio-button label=\"1d\">1天</el-radio-button>\r\n              <el-radio-button label=\"7d\">7天</el-radio-button>\r\n              <el-radio-button label=\"30d\">30天</el-radio-button>\r\n            </el-radio-group>\r\n            <el-button type=\"primary\" size=\"small\" @click=\"refreshData\" icon=\"el-icon-refresh\" :loading=\"loading.prices\">刷新数据</el-button>\r\n          </div>\r\n        </div>\r\n        <div ref=\"priceChart\" class=\"price-chart\"></div>\r\n      </el-card>\r\n      \r\n      <!-- 对话框区域 -->\r\n      <div class=\"chat-section\">\r\n        <el-card class=\"chat-card\">\r\n          <div slot=\"header\" class=\"chat-header\">\r\n            <span>加密货币新闻助手</span>\r\n            <el-tooltip content=\"获取最新的加密货币新闻和市场动态\" placement=\"top\">\r\n              <i class=\"el-icon-question\"></i>\r\n            </el-tooltip>\r\n          </div>\r\n          <div class=\"chat-messages\" ref=\"chatMessages\">\r\n            <div v-for=\"(message, index) in aiMessages\" :key=\"index\" \r\n                 :class=\"['message', message.role === 'user' ? 'user-message' : 'ai-message']\">\r\n              <div class=\"message-content\">{{ message.content }}</div>\r\n              <div class=\"message-time\">{{ message.time }}</div>\r\n            </div>\r\n          </div>\r\n          <div class=\"chat-input\">\r\n            <el-input\r\n              v-model=\"aiInputMessage\"\r\n              placeholder=\"询问最新加密货币新闻，例如：'比特币最新消息'\"\r\n              :disabled=\"aiLoading\"\r\n              @keyup.enter.native=\"sendAiMessage\"\r\n            >\r\n              <el-button slot=\"append\" :loading=\"aiLoading\" @click=\"sendAiMessage\">发送</el-button>\r\n            </el-input>\r\n          </div>\r\n        </el-card>\r\n        \r\n        <el-card class=\"chat-card\">\r\n          <div slot=\"header\" class=\"chat-header\">\r\n            <span>价格预测</span>\r\n            <el-tooltip content=\"使用AI模型预测比特币未来价格走势\" placement=\"top\">\r\n              <i class=\"el-icon-question\"></i>\r\n            </el-tooltip>\r\n          </div>\r\n          <div class=\"chat-messages\" ref=\"predictionMessages\">\r\n            <div v-for=\"(message, index) in predictionMessages\" :key=\"index\" \r\n                 :class=\"['message', message.role === 'user' ? 'user-message' : 'ai-message']\">\r\n              <div class=\"message-content\">{{ message.content }}</div>\r\n              <div class=\"message-time\">{{ message.time }}</div>\r\n            </div>\r\n          </div>\r\n          <div class=\"chat-input\">\r\n            <el-input\r\n              v-model=\"predictionInputMessage\"\r\n              placeholder=\"请输入预测参数，例如：'预测未来3天的BTC价格'\"\r\n              :disabled=\"predictionLoading\"\r\n              @keyup.enter.native=\"sendPredictionRequest\"\r\n            >\r\n              <el-button slot=\"append\" :loading=\"predictionLoading\" @click=\"sendPredictionRequest\">预测</el-button>\r\n            </el-input>\r\n          </div>\r\n        </el-card>\r\n      </div>\r\n    </el-main>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts'\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n  name: 'Dashboard',\r\n  data() {\r\n    return {\r\n      priceChart: null,\r\n      aiMessages: [\r\n        {\r\n          role: 'ai',\r\n          content: '您好！我是您的加密货币新闻助手。您可以询问我比特币相关新闻和市场动态。例如，尝试输入\"比特币最新消息\"或\"今日加密货币热点\"。',\r\n          time: this.formatTime(new Date())\r\n        }\r\n      ],\r\n      predictionMessages: [\r\n        {\r\n          role: 'ai',\r\n          content: '欢迎使用比特币价格预测功能。我将结合实时价格数据和新闻情感分析，使用训练好的模型为您提供预测结果。请输入您想要预测的时间范围，例如\"预测未来3天的比特币价格\"。',\r\n          time: this.formatTime(new Date())\r\n        }\r\n      ],\r\n      aiInputMessage: '',\r\n      predictionInputMessage: '',\r\n      aiLoading: false,\r\n      predictionLoading: false,\r\n      bitcoinPrices: [],\r\n      currentUser: {\r\n        username: '用户'\r\n      },\r\n      timeRange: '7d', // 默认显示7天数据\r\n      loading: {\r\n        prices: false,\r\n        prediction: false\r\n      },\r\n      error: null\r\n    }\r\n  },\r\n  mounted() {\r\n    // 从store获取用户信息\r\n    this.currentUser = this.$store.getters.currentUser || { username: '用户' }\r\n    \r\n    // 初始化价格图表\r\n    this.initPriceChart()\r\n    \r\n    // 获取比特币价格数据\r\n    this.fetchBitcoinPrices()\r\n    \r\n    // 滚动聊天框到底部\r\n    this.$nextTick(() => {\r\n      this.scrollChatToBottom('chatMessages')\r\n      this.scrollChatToBottom('predictionMessages')\r\n    })\r\n  },\r\n  updated() {\r\n    // 在组件更新后也滚动到底部\r\n    this.scrollChatToBottom('chatMessages')\r\n    this.scrollChatToBottom('predictionMessages')\r\n  },\r\n  methods: {\r\n    initPriceChart() {\r\n      this.priceChart = echarts.init(this.$refs.priceChart)\r\n      \r\n      const option = {\r\n        tooltip: {\r\n          trigger: 'axis',\r\n          formatter: '{b}<br />{a}: {c} USD'\r\n        },\r\n        xAxis: {\r\n          type: 'category',\r\n          data: [],\r\n          axisTick: {\r\n            alignWithLabel: true\r\n          }\r\n        },\r\n        yAxis: {\r\n          type: 'value',\r\n          scale: true,\r\n          name: '价格 (USD)',\r\n          nameLocation: 'middle',\r\n          nameGap: 30,\r\n          axisLabel: {\r\n            formatter: '{value} USD'\r\n          }\r\n        },\r\n        series: [{\r\n          name: '比特币价格',\r\n          type: 'line',\r\n          smooth: true,\r\n          symbol: 'circle',\r\n          symbolSize: 8,\r\n          data: [],\r\n          itemStyle: {\r\n            color: '#f7931a'\r\n          },\r\n          lineStyle: {\r\n            width: 3,\r\n            shadowColor: 'rgba(247, 147, 26, 0.5)',\r\n            shadowBlur: 10\r\n          },\r\n          areaStyle: {\r\n            color: {\r\n              type: 'linear',\r\n              x: 0,\r\n              y: 0,\r\n              x2: 0,\r\n              y2: 1,\r\n              colorStops: [{\r\n                offset: 0, color: 'rgba(247, 147, 26, 0.5)'\r\n              }, {\r\n                offset: 1, color: 'rgba(247, 147, 26, 0.1)'\r\n              }]\r\n            }\r\n          }\r\n        }]\r\n      }\r\n      \r\n      this.priceChart.setOption(option)\r\n      \r\n      // 响应式调整图表大小\r\n      window.addEventListener('resize', () => {\r\n        this.priceChart.resize()\r\n      })\r\n    },\r\n    async fetchBitcoinPrices() {\r\n      this.loading.prices = true\r\n      \r\n      try {\r\n        // 从Binance API获取数据\r\n        let limit = 30\r\n        let interval = '1d'\r\n        \r\n        if (this.timeRange === '1d') {\r\n          interval = '1h'\r\n          limit = 24\r\n        } else if (this.timeRange === '7d') {\r\n          interval = '4h'\r\n          limit = 42 // 7天 * 6个4小时时段\r\n        } else if (this.timeRange === '30d') {\r\n          interval = '1d'\r\n          limit = 30\r\n        }\r\n        \r\n        const response = await axios.get(`https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=${interval}&limit=${limit}`)\r\n        \r\n        // 处理Binance返回的数据\r\n        const prices = response.data.map(item => {\r\n          const timestamp = item[0]\r\n          const closePrice = parseFloat(item[4])\r\n          const date = new Date(timestamp)\r\n          \r\n          // 根据时间范围格式化日期\r\n          let formattedDate\r\n          if (this.timeRange === '1d') {\r\n            formattedDate = `${date.getHours()}:00`\r\n          } else {\r\n            formattedDate = date.toISOString().split('T')[0]\r\n          }\r\n          \r\n          return {\r\n            date: formattedDate,\r\n            price: closePrice\r\n          }\r\n        })\r\n        \r\n        this.bitcoinPrices = prices\r\n        \r\n        // 更新价格图表\r\n        const dates = prices.map(item => item.date)\r\n        const priceValues = prices.map(item => item.price)\r\n        \r\n        this.priceChart.setOption({\r\n          xAxis: {\r\n            data: dates\r\n          },\r\n          series: [{\r\n            data: priceValues\r\n          }]\r\n        })\r\n        \r\n      } catch (error) {\r\n        console.error('获取比特币价格数据失败:', error)\r\n        this.error = '获取价格数据失败，请稍后重试'\r\n        // 使用模拟数据作为备选\r\n        await this.$store.dispatch('fetchBitcoinPrices')\r\n        const prices = this.$store.getters.bitcoinPrices\r\n        \r\n        if (prices && prices.length) {\r\n          this.bitcoinPrices = prices\r\n          const dates = prices.map(item => item.date)\r\n          const priceValues = prices.map(item => item.price)\r\n          \r\n          this.priceChart.setOption({\r\n            xAxis: {\r\n              data: dates\r\n            },\r\n            series: [{\r\n              data: priceValues\r\n            }]\r\n          })\r\n        }\r\n      } finally {\r\n        this.loading.prices = false\r\n      }\r\n    },\r\n    refreshData() {\r\n      this.fetchBitcoinPrices()\r\n      this.$message({\r\n        message: '数据已刷新',\r\n        type: 'success'\r\n      })\r\n    },\r\n    changeTimeRange(range) {\r\n      this.timeRange = range\r\n      this.fetchBitcoinPrices()\r\n    },\r\n    formatTime(date) {\r\n      const hours = date.getHours().toString().padStart(2, '0')\r\n      const minutes = date.getMinutes().toString().padStart(2, '0')\r\n      return `${hours}:${minutes}`\r\n    },\r\n    scrollChatToBottom(ref) {\r\n      const element = this.$refs[ref];\r\n      if (element) {\r\n        // 使用setTimeout确保DOM更新后再滚动\r\n        setTimeout(() => {\r\n          element.scrollTop = element.scrollHeight;\r\n        }, 100);\r\n      }\r\n    },\r\n    async sendAiMessage() {\r\n      if (!this.aiInputMessage.trim()) return\r\n      \r\n      // 添加用户消息\r\n      this.aiMessages.push({\r\n        role: 'user',\r\n        content: this.aiInputMessage,\r\n        time: this.formatTime(new Date())\r\n      })\r\n      \r\n      // 清空输入框并滚动到底部\r\n      const userMessage = this.aiInputMessage\r\n      this.aiInputMessage = ''\r\n      this.$nextTick(() => {\r\n        this.scrollChatToBottom('chatMessages')\r\n      })\r\n      \r\n      this.aiLoading = true\r\n      \r\n      try {\r\n        // 检查是否是询问比特币新闻的请求\r\n        const isNewsQuery = userMessage.toLowerCase().includes('比特币') && \r\n                            (userMessage.toLowerCase().includes('新闻') || \r\n                             userMessage.toLowerCase().includes('消息') || \r\n                             userMessage.toLowerCase().includes('最新') ||\r\n                             userMessage.toLowerCase().includes('热点') ||\r\n                             userMessage.toLowerCase().includes('趋势'));\r\n        \r\n        let response = '';\r\n        \r\n        if (isNewsQuery) {\r\n          // 如果是新闻查询，调用后端API获取最新比特币新闻\r\n          try {\r\n            const result = await axios.get('/api/news');\r\n            if (result.data && result.data.news && result.data.news.length > 0) {\r\n              // 格式化新闻信息\r\n              const newsList = result.data.news;\r\n              const newsText = newsList.map(news => \r\n                `标题: ${news.title}\\n来源: ${news.source}\\n链接: ${news.url}\\n`\r\n              ).join('\\n');\r\n              \r\n              const sentiment = result.data.sentiment_score;\r\n              let sentimentText = '中性';\r\n              if (sentiment > 0.3) sentimentText = '积极';\r\n              else if (sentiment < -0.3) sentimentText = '消极';\r\n              \r\n              response = `以下是最新比特币相关新闻 (市场情绪：${sentimentText}, 指数：${sentiment.toFixed(2)})：\\n\\n${newsText}`;\r\n            } else {\r\n              response = '抱歉，目前无法获取比特币新闻数据。请稍后再试。';\r\n            }\r\n          } catch (e) {\r\n            console.error('获取新闻API失败:', e);\r\n            response = '抱歉，获取比特币新闻时出现问题。请稍后再试。';\r\n          }\r\n        } else {\r\n          // 如果不是新闻查询，提供一般对话回复\r\n          if (userMessage.toLowerCase().includes('你好') || userMessage.toLowerCase().includes('嗨') || userMessage.toLowerCase().includes('hi')) {\r\n            response = '您好！我是您的加密货币助手。您可以询问我比特币相关的新闻和市场动态，也可以与我聊聊其他话题。';\r\n          } else if (userMessage.toLowerCase().includes('你是谁') || userMessage.toLowerCase().includes('你能做什么')) {\r\n            response = '我是一个加密货币助手，可以为您提供比特币相关新闻和信息。您可以向我询问\"最新比特币新闻\"或\"比特币市场趋势\"等问题，我会尝试为您获取相关信息。';\r\n          } else if (userMessage.toLowerCase().includes('价格') || userMessage.toLowerCase().includes('多少钱')) {\r\n            response = '您可以在页面上方的价格图表中查看比特币的最新价格走势。如果您想了解未来价格预测，可以使用右侧的价格预测功能。';\r\n          } else if (userMessage.toLowerCase().includes('谢谢') || userMessage.toLowerCase().includes('感谢')) {\r\n            response = '不客气！如果您有其他问题，随时可以向我咨询。';\r\n          } else {\r\n            response = '我理解您想了解更多信息。如果您想获取最新的比特币新闻，可以直接询问\"最新比特币新闻\"。您也可以使用右侧的价格预测功能来预测未来价格走势。';\r\n          }\r\n        }\r\n        \r\n        // 添加AI回复\r\n        this.aiMessages.push({\r\n          role: 'ai',\r\n          content: response,\r\n          time: this.formatTime(new Date())\r\n        });\r\n      } catch (error) {\r\n        console.error('处理消息失败:', error);\r\n        this.aiMessages.push({\r\n          role: 'ai',\r\n          content: '抱歉，处理您的请求时出现了问题。请稍后重试。',\r\n          time: this.formatTime(new Date())\r\n        });\r\n      } finally {\r\n        this.aiLoading = false;\r\n        this.$nextTick(() => {\r\n          this.scrollChatToBottom('chatMessages');\r\n        });\r\n      }\r\n    },\r\n    async sendPredictionRequest() {\r\n      if (!this.predictionInputMessage.trim()) return\r\n      \r\n      // 添加用户消息\r\n      this.predictionMessages.push({\r\n        role: 'user',\r\n        content: this.predictionInputMessage,\r\n        time: this.formatTime(new Date())\r\n      })\r\n      \r\n      // 清空输入框并滚动到底部\r\n      const userMessage = this.predictionInputMessage\r\n      this.predictionInputMessage = ''\r\n      this.$nextTick(() => {\r\n        this.scrollChatToBottom('predictionMessages')\r\n      })\r\n      \r\n      this.predictionLoading = true\r\n      \r\n      try {\r\n        // 解析用户消息，确定预测天数\r\n        let days = 7 // 默认预测7天\r\n        if (userMessage.includes('3天') || userMessage.includes('三天')) {\r\n          days = 3\r\n        } else if (userMessage.includes('一周') || userMessage.includes('7天')) {\r\n          days = 7\r\n        } else if (userMessage.includes('两周') || userMessage.includes('14天')) {\r\n          days = 14\r\n        } else if (userMessage.includes('30天') || userMessage.includes('一个月')) {\r\n          days = 30\r\n        }\r\n        \r\n        // 先获取情感分析数据\r\n        let sentimentScore = 0\r\n        try {\r\n          const newsResult = await axios.get('/api/news')\r\n          if (newsResult.data && newsResult.data.sentiment_score !== undefined) {\r\n            sentimentScore = newsResult.data.sentiment_score\r\n          }\r\n        } catch (e) {\r\n          console.error('获取情感分析数据失败:', e)\r\n        }\r\n        \r\n        // 获取最新价格数据作为输入参数\r\n        let priceData = null\r\n        try {\r\n          const priceResult = await axios.get('/api/bitcoin/prices')\r\n          if (priceResult.data && priceResult.data.length > 0) {\r\n            // 使用最新的价格数据\r\n            priceData = priceResult.data[0]\r\n          }\r\n        } catch (e) {\r\n          console.error('获取价格数据失败:', e)\r\n        }\r\n        \r\n        // 调用预测API，传递所有必要参数\r\n        let predictionResult = null\r\n        try {\r\n          const params = {\r\n            days,\r\n            sentiment_score: sentimentScore\r\n          }\r\n          \r\n          // 如果有价格数据，添加到参数中\r\n          if (priceData) {\r\n            params.price_data = priceData\r\n          }\r\n          \r\n          const response = await axios.post('/api/bitcoin/predict', params)\r\n          predictionResult = response.data\r\n          \r\n          if (!predictionResult || !predictionResult.dates || !predictionResult.prices) {\r\n            throw new Error('预测结果格式不正确')\r\n          }\r\n        } catch (e) {\r\n          console.error('调用预测API失败:', e)\r\n          this.predictionMessages.push({\r\n            role: 'ai',\r\n            content: '抱歉，预测服务暂时不可用。我们的预测模型需要结合最新价格数据和新闻情感分析来提供准确的预测。请稍后再试。',\r\n            time: this.formatTime(new Date())\r\n          })\r\n          this.predictionLoading = false\r\n          return\r\n        }\r\n        \r\n        // 处理预测结果\r\n        const formattedResults = predictionResult.dates.map((date, index) => {\r\n          // 计算与当前价格的百分比变化\r\n          const currentPrice = predictionResult.current_price || 58000\r\n          const priceChange = ((predictionResult.prices[index] - currentPrice) / currentPrice * 100).toFixed(2)\r\n          const changeSymbol = priceChange >= 0 ? '+' : ''\r\n          \r\n          return `${date}: ${predictionResult.prices[index].toFixed(2)} USD (${changeSymbol}${priceChange}%)`\r\n        }).join('\\n')\r\n        \r\n        // 生成分析结论\r\n        const lastPrice = predictionResult.prices[predictionResult.prices.length - 1]\r\n        const firstPrice = predictionResult.prices[0]\r\n        const trend = lastPrice > firstPrice ? '上升' : '下降'\r\n        const confidence = Math.floor(65 + Math.random() * 20)\r\n        \r\n        // 添加情感分析结果\r\n        let sentimentInfo = ''\r\n        if (predictionResult.sentiment_score !== undefined) {\r\n          let sentimentText = '中性'\r\n          if (predictionResult.sentiment_score > 0.3) sentimentText = '积极'\r\n          else if (predictionResult.sentiment_score < -0.3) sentimentText = '消极'\r\n          \r\n          sentimentInfo = `\\n\\n市场情绪分析：${sentimentText} (${predictionResult.sentiment_score.toFixed(2)})`\r\n        } else if (sentimentScore) {\r\n          let sentimentText = '中性'\r\n          if (sentimentScore > 0.3) sentimentText = '积极'\r\n          else if (sentimentScore < -0.3) sentimentText = '消极'\r\n          \r\n          sentimentInfo = `\\n\\n市场情绪分析：${sentimentText} (${sentimentScore.toFixed(2)})`\r\n        }\r\n        \r\n        const response = `根据历史价格数据、市场情绪分析和我们的预测模型，比特币价格预测结果如下：\\n\\n${formattedResults}${sentimentInfo}\\n\\n预测趋势：${trend}\\n置信度：${confidence}%\\n\\n影响因素分析：\\n1. 当前市场整体处于${trend === '上升' ? '偏向积极' : '谨慎观望'}情绪\\n2. 技术指标显示短期内可能${trend === '上升' ? '继续上行' : '有回调压力'}\\n3. 最新消息对市场影响${trend === '上升' ? '偏正面' : '中性偏负面'}\\n\\n请注意，这只是基于历史数据的预测，实际市场可能受多种因素影响而变化。`\r\n        \r\n        // 添加AI回复\r\n        this.predictionMessages.push({\r\n          role: 'ai',\r\n          content: response,\r\n          time: this.formatTime(new Date())\r\n        })\r\n      } catch (error) {\r\n        console.error('预测请求失败:', error)\r\n        this.predictionMessages.push({\r\n          role: 'ai',\r\n          content: '抱歉，预测服务暂时不可用。请稍后重试。',\r\n          time: this.formatTime(new Date())\r\n        })\r\n      } finally {\r\n        this.predictionLoading = false\r\n        this.$nextTick(() => {\r\n          this.scrollChatToBottom('predictionMessages')\r\n        })\r\n      }\r\n    },\r\n    logout() {\r\n      this.$store.dispatch('logout')\r\n      this.$router.push('/')\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.dashboard-container {\r\n  min-height: 100vh;\r\n  background-color: #f5f7fa;\r\n}\r\n\r\n.header {\r\n  background-color: #1e1e1e;\r\n  color: white;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 0 20px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.logo {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.bitcoin-logo {\r\n  height: 30px;\r\n  margin-right: 10px;\r\n}\r\n\r\n.user-info {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.user-info span {\r\n  margin-right: 15px;\r\n}\r\n\r\n.main-content {\r\n  padding: 20px;\r\n  max-width: 1400px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.chart-card {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.chart-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.price-chart {\r\n  height: 350px;\r\n  width: 100%;\r\n}\r\n\r\n.chat-section {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(450px, 1fr));\r\n  gap: 20px;\r\n}\r\n\r\n.chat-card {\r\n  height: 500px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-height: 500px;\r\n}\r\n\r\n.chat-header {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.chat-header i {\r\n  margin-left: 8px;\r\n  color: #909399;\r\n  cursor: pointer;\r\n}\r\n\r\n.chat-messages {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 10px;\r\n  background-color: #f9f9f9;\r\n  border-radius: 4px;\r\n  margin-bottom: 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-height: 350px;\r\n}\r\n\r\n.message {\r\n  max-width: 80%;\r\n  margin-bottom: 12px;\r\n  padding: 10px;\r\n  border-radius: 10px;\r\n  position: relative;\r\n}\r\n\r\n.user-message {\r\n  align-self: flex-end;\r\n  background-color: #ecf5ff;\r\n  border: 1px solid #d9ecff;\r\n}\r\n\r\n.ai-message {\r\n  align-self: flex-start;\r\n  background-color: #f4f4f5;\r\n  border: 1px solid #e9e9eb;\r\n}\r\n\r\n.message-content {\r\n  word-wrap: break-word;\r\n  white-space: pre-line;\r\n}\r\n\r\n.message-time {\r\n  font-size: 11px;\r\n  color: #909399;\r\n  margin-top: 4px;\r\n  text-align: right;\r\n}\r\n\r\n.chat-input {\r\n  margin-top: auto;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .chat-section {\r\n    grid-template-columns: 1fr;\r\n  }\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]}]}