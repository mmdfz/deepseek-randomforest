{"remainingRequest":"D:\\桌面\\twitterpredict\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\桌面\\twitterpredict\\frontend\\src\\views\\Dashboard.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\桌面\\twitterpredict\\frontend\\src\\views\\Dashboard.vue","mtime":1747150580040},{"path":"D:\\桌面\\twitterpredict\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1747130286327},{"path":"D:\\桌面\\twitterpredict\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1747130285089},{"path":"D:\\桌面\\twitterpredict\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1747130265551}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQppbXBvcnQgKiBhcyBlY2hhcnRzIGZyb20gJ2VjaGFydHMnDQppbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnDQoNCmV4cG9ydCBkZWZhdWx0IHsNCiAgbmFtZTogJ0Rhc2hib2FyZCcsDQogIGRhdGEoKSB7DQogICAgcmV0dXJuIHsNCiAgICAgIHByaWNlQ2hhcnQ6IG51bGwsDQogICAgICBhaU1lc3NhZ2VzOiBbDQogICAgICAgIHsNCiAgICAgICAgICByb2xlOiAnYWknLA0KICAgICAgICAgIGNvbnRlbnQ6ICfmgqjlpb3vvIHmiJHmmK/mgqjnmoTliqDlr4botKfluIHmlrDpl7vliqnmiYvjgILmgqjlj6/ku6Xor6Lpl67miJHmr5TnibnluIHnm7jlhbPmlrDpl7vlkozluILlnLrliqjmgIHjgILkvovlpoLvvIzlsJ3or5XovpPlhaUi5q+U54m55biB5pyA5paw5raI5oGvIuaIliLku4rml6XliqDlr4botKfluIHng63ngrki44CCJywNCiAgICAgICAgICB0aW1lOiB0aGlzLmZvcm1hdFRpbWUobmV3IERhdGUoKSkNCiAgICAgICAgfQ0KICAgICAgXSwNCiAgICAgIHByZWRpY3Rpb25NZXNzYWdlczogWw0KICAgICAgICB7DQogICAgICAgICAgcm9sZTogJ2FpJywNCiAgICAgICAgICBjb250ZW50OiAn5qyi6L+O5L2/55So5q+U54m55biB5Lu35qC86aKE5rWL5Yqf6IO944CC5oiR5bCG57uT5ZCI5a6e5pe25Lu35qC85pWw5o2u5ZKM5paw6Ze75oOF5oSf5YiG5p6Q77yM5L2/55So6K6t57uD5aW955qE5qih5Z6L5Li65oKo5o+Q5L6b6aKE5rWL57uT5p6c44CC6K+36L6T5YWl5oKo5oOz6KaB6aKE5rWL55qE5pe26Ze06IyD5Zu077yM5L6L5aaCIumihOa1i+acquadpTPlpKnnmoTmr5TnibnluIHku7fmoLwi44CCJywNCiAgICAgICAgICB0aW1lOiB0aGlzLmZvcm1hdFRpbWUobmV3IERhdGUoKSkNCiAgICAgICAgfQ0KICAgICAgXSwNCiAgICAgIGFpSW5wdXRNZXNzYWdlOiAnJywNCiAgICAgIHByZWRpY3Rpb25JbnB1dE1lc3NhZ2U6ICcnLA0KICAgICAgYWlMb2FkaW5nOiBmYWxzZSwNCiAgICAgIHByZWRpY3Rpb25Mb2FkaW5nOiBmYWxzZSwNCiAgICAgIGJpdGNvaW5QcmljZXM6IFtdLA0KICAgICAgY3VycmVudFVzZXI6IHsNCiAgICAgICAgdXNlcm5hbWU6ICfnlKjmiLcnDQogICAgICB9LA0KICAgICAgdGltZVJhbmdlOiAnN2QnLCAvLyDpu5jorqTmmL7npLo35aSp5pWw5o2uDQogICAgICBsb2FkaW5nOiB7DQogICAgICAgIHByaWNlczogZmFsc2UsDQogICAgICAgIHByZWRpY3Rpb246IGZhbHNlDQogICAgICB9LA0KICAgICAgZXJyb3I6IG51bGwNCiAgICB9DQogIH0sDQogIG1vdW50ZWQoKSB7DQogICAgLy8g5LuOc3RvcmXojrflj5bnlKjmiLfkv6Hmga8NCiAgICB0aGlzLmN1cnJlbnRVc2VyID0gdGhpcy4kc3RvcmUuZ2V0dGVycy5jdXJyZW50VXNlciB8fCB7IHVzZXJuYW1lOiAn55So5oi3JyB9DQogICAgDQogICAgLy8g5Yid5aeL5YyW5Lu35qC85Zu+6KGoDQogICAgdGhpcy5pbml0UHJpY2VDaGFydCgpDQogICAgDQogICAgLy8g6I635Y+W5q+U54m55biB5Lu35qC85pWw5o2uDQogICAgdGhpcy5mZXRjaEJpdGNvaW5QcmljZXMoKQ0KICAgIA0KICAgIC8vIOa7muWKqOiBiuWkqeahhuWIsOW6lemDqA0KICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHsNCiAgICAgIHRoaXMuc2Nyb2xsQ2hhdFRvQm90dG9tKCdjaGF0TWVzc2FnZXMnKQ0KICAgICAgdGhpcy5zY3JvbGxDaGF0VG9Cb3R0b20oJ3ByZWRpY3Rpb25NZXNzYWdlcycpDQogICAgfSkNCiAgfSwNCiAgdXBkYXRlZCgpIHsNCiAgICAvLyDlnKjnu4Tku7bmm7TmlrDlkI7kuZ/mu5rliqjliLDlupXpg6gNCiAgICB0aGlzLnNjcm9sbENoYXRUb0JvdHRvbSgnY2hhdE1lc3NhZ2VzJykNCiAgICB0aGlzLnNjcm9sbENoYXRUb0JvdHRvbSgncHJlZGljdGlvbk1lc3NhZ2VzJykNCiAgfSwNCiAgbWV0aG9kczogew0KICAgIGluaXRQcmljZUNoYXJ0KCkgew0KICAgICAgdGhpcy5wcmljZUNoYXJ0ID0gZWNoYXJ0cy5pbml0KHRoaXMuJHJlZnMucHJpY2VDaGFydCkNCiAgICAgIA0KICAgICAgY29uc3Qgb3B0aW9uID0gew0KICAgICAgICB0b29sdGlwOiB7DQogICAgICAgICAgdHJpZ2dlcjogJ2F4aXMnLA0KICAgICAgICAgIGZvcm1hdHRlcjogJ3tifTxiciAvPnthfToge2N9IFVTRCcNCiAgICAgICAgfSwNCiAgICAgICAgeEF4aXM6IHsNCiAgICAgICAgICB0eXBlOiAnY2F0ZWdvcnknLA0KICAgICAgICAgIGRhdGE6IFtdLA0KICAgICAgICAgIGF4aXNUaWNrOiB7DQogICAgICAgICAgICBhbGlnbldpdGhMYWJlbDogdHJ1ZQ0KICAgICAgICAgIH0NCiAgICAgICAgfSwNCiAgICAgICAgeUF4aXM6IHsNCiAgICAgICAgICB0eXBlOiAndmFsdWUnLA0KICAgICAgICAgIHNjYWxlOiB0cnVlLA0KICAgICAgICAgIG5hbWU6ICfku7fmoLwgKFVTRCknLA0KICAgICAgICAgIG5hbWVMb2NhdGlvbjogJ21pZGRsZScsDQogICAgICAgICAgbmFtZUdhcDogMzAsDQogICAgICAgICAgYXhpc0xhYmVsOiB7DQogICAgICAgICAgICBmb3JtYXR0ZXI6ICd7dmFsdWV9IFVTRCcNCiAgICAgICAgICB9DQogICAgICAgIH0sDQogICAgICAgIHNlcmllczogW3sNCiAgICAgICAgICBuYW1lOiAn5q+U54m55biB5Lu35qC8JywNCiAgICAgICAgICB0eXBlOiAnbGluZScsDQogICAgICAgICAgc21vb3RoOiB0cnVlLA0KICAgICAgICAgIHN5bWJvbDogJ2NpcmNsZScsDQogICAgICAgICAgc3ltYm9sU2l6ZTogOCwNCiAgICAgICAgICBkYXRhOiBbXSwNCiAgICAgICAgICBpdGVtU3R5bGU6IHsNCiAgICAgICAgICAgIGNvbG9yOiAnI2Y3OTMxYScNCiAgICAgICAgICB9LA0KICAgICAgICAgIGxpbmVTdHlsZTogew0KICAgICAgICAgICAgd2lkdGg6IDMsDQogICAgICAgICAgICBzaGFkb3dDb2xvcjogJ3JnYmEoMjQ3LCAxNDcsIDI2LCAwLjUpJywNCiAgICAgICAgICAgIHNoYWRvd0JsdXI6IDEwDQogICAgICAgICAgfSwNCiAgICAgICAgICBhcmVhU3R5bGU6IHsNCiAgICAgICAgICAgIGNvbG9yOiB7DQogICAgICAgICAgICAgIHR5cGU6ICdsaW5lYXInLA0KICAgICAgICAgICAgICB4OiAwLA0KICAgICAgICAgICAgICB5OiAwLA0KICAgICAgICAgICAgICB4MjogMCwNCiAgICAgICAgICAgICAgeTI6IDEsDQogICAgICAgICAgICAgIGNvbG9yU3RvcHM6IFt7DQogICAgICAgICAgICAgICAgb2Zmc2V0OiAwLCBjb2xvcjogJ3JnYmEoMjQ3LCAxNDcsIDI2LCAwLjUpJw0KICAgICAgICAgICAgICB9LCB7DQogICAgICAgICAgICAgICAgb2Zmc2V0OiAxLCBjb2xvcjogJ3JnYmEoMjQ3LCAxNDcsIDI2LCAwLjEpJw0KICAgICAgICAgICAgICB9XQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgIH0NCiAgICAgICAgfV0NCiAgICAgIH0NCiAgICAgIA0KICAgICAgdGhpcy5wcmljZUNoYXJ0LnNldE9wdGlvbihvcHRpb24pDQogICAgICANCiAgICAgIC8vIOWTjeW6lOW8j+iwg+aVtOWbvuihqOWkp+Wwjw0KICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsICgpID0+IHsNCiAgICAgICAgdGhpcy5wcmljZUNoYXJ0LnJlc2l6ZSgpDQogICAgICB9KQ0KICAgIH0sDQogICAgYXN5bmMgZmV0Y2hCaXRjb2luUHJpY2VzKCkgew0KICAgICAgdGhpcy5sb2FkaW5nLnByaWNlcyA9IHRydWUNCiAgICAgIA0KICAgICAgdHJ5IHsNCiAgICAgICAgLy8g5LuOQmluYW5jZSBBUEnojrflj5bmlbDmja4NCiAgICAgICAgbGV0IGxpbWl0ID0gMzANCiAgICAgICAgbGV0IGludGVydmFsID0gJzFkJw0KICAgICAgICANCiAgICAgICAgaWYgKHRoaXMudGltZVJhbmdlID09PSAnMWQnKSB7DQogICAgICAgICAgaW50ZXJ2YWwgPSAnMWgnDQogICAgICAgICAgbGltaXQgPSAyNA0KICAgICAgICB9IGVsc2UgaWYgKHRoaXMudGltZVJhbmdlID09PSAnN2QnKSB7DQogICAgICAgICAgaW50ZXJ2YWwgPSAnNGgnDQogICAgICAgICAgbGltaXQgPSA0MiAvLyA35aSpICogNuS4qjTlsI/ml7bml7bmrrUNCiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnRpbWVSYW5nZSA9PT0gJzMwZCcpIHsNCiAgICAgICAgICBpbnRlcnZhbCA9ICcxZCcNCiAgICAgICAgICBsaW1pdCA9IDMwDQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0KGBodHRwczovL2FwaS5iaW5hbmNlLmNvbS9hcGkvdjMva2xpbmVzP3N5bWJvbD1CVENVU0RUJmludGVydmFsPSR7aW50ZXJ2YWx9JmxpbWl0PSR7bGltaXR9YCkNCiAgICAgICAgDQogICAgICAgIC8vIOWkhOeQhkJpbmFuY2Xov5Tlm57nmoTmlbDmja4NCiAgICAgICAgY29uc3QgcHJpY2VzID0gcmVzcG9uc2UuZGF0YS5tYXAoaXRlbSA9PiB7DQogICAgICAgICAgY29uc3QgdGltZXN0YW1wID0gaXRlbVswXQ0KICAgICAgICAgIGNvbnN0IGNsb3NlUHJpY2UgPSBwYXJzZUZsb2F0KGl0ZW1bNF0pDQogICAgICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHRpbWVzdGFtcCkNCiAgICAgICAgICANCiAgICAgICAgICAvLyDmoLnmja7ml7bpl7TojIPlm7TmoLzlvI/ljJbml6XmnJ8NCiAgICAgICAgICBsZXQgZm9ybWF0dGVkRGF0ZQ0KICAgICAgICAgIGlmICh0aGlzLnRpbWVSYW5nZSA9PT0gJzFkJykgew0KICAgICAgICAgICAgZm9ybWF0dGVkRGF0ZSA9IGAke2RhdGUuZ2V0SG91cnMoKX06MDBgDQogICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIGZvcm1hdHRlZERhdGUgPSBkYXRlLnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1QnKVswXQ0KICAgICAgICAgIH0NCiAgICAgICAgICANCiAgICAgICAgICByZXR1cm4gew0KICAgICAgICAgICAgZGF0ZTogZm9ybWF0dGVkRGF0ZSwNCiAgICAgICAgICAgIHByaWNlOiBjbG9zZVByaWNlDQogICAgICAgICAgfQ0KICAgICAgICB9KQ0KICAgICAgICANCiAgICAgICAgdGhpcy5iaXRjb2luUHJpY2VzID0gcHJpY2VzDQogICAgICAgIA0KICAgICAgICAvLyDmm7TmlrDku7fmoLzlm77ooagNCiAgICAgICAgY29uc3QgZGF0ZXMgPSBwcmljZXMubWFwKGl0ZW0gPT4gaXRlbS5kYXRlKQ0KICAgICAgICBjb25zdCBwcmljZVZhbHVlcyA9IHByaWNlcy5tYXAoaXRlbSA9PiBpdGVtLnByaWNlKQ0KICAgICAgICANCiAgICAgICAgdGhpcy5wcmljZUNoYXJ0LnNldE9wdGlvbih7DQogICAgICAgICAgeEF4aXM6IHsNCiAgICAgICAgICAgIGRhdGE6IGRhdGVzDQogICAgICAgICAgfSwNCiAgICAgICAgICBzZXJpZXM6IFt7DQogICAgICAgICAgICBkYXRhOiBwcmljZVZhbHVlcw0KICAgICAgICAgIH1dDQogICAgICAgIH0pDQogICAgICAgIA0KICAgICAgfSBjYXRjaCAoZXJyb3IpIHsNCiAgICAgICAgY29uc29sZS5lcnJvcign6I635Y+W5q+U54m55biB5Lu35qC85pWw5o2u5aSx6LSlOicsIGVycm9yKQ0KICAgICAgICB0aGlzLmVycm9yID0gJ+iOt+WPluS7t+agvOaVsOaNruWksei0pe+8jOivt+eojeWQjumHjeivlScNCiAgICAgICAgLy8g5L2/55So5qih5ouf5pWw5o2u5L2c5Li65aSH6YCJDQogICAgICAgIGF3YWl0IHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdmZXRjaEJpdGNvaW5QcmljZXMnKQ0KICAgICAgICBjb25zdCBwcmljZXMgPSB0aGlzLiRzdG9yZS5nZXR0ZXJzLmJpdGNvaW5QcmljZXMNCiAgICAgICAgDQogICAgICAgIGlmIChwcmljZXMgJiYgcHJpY2VzLmxlbmd0aCkgew0KICAgICAgICAgIHRoaXMuYml0Y29pblByaWNlcyA9IHByaWNlcw0KICAgICAgICAgIGNvbnN0IGRhdGVzID0gcHJpY2VzLm1hcChpdGVtID0+IGl0ZW0uZGF0ZSkNCiAgICAgICAgICBjb25zdCBwcmljZVZhbHVlcyA9IHByaWNlcy5tYXAoaXRlbSA9PiBpdGVtLnByaWNlKQ0KICAgICAgICAgIA0KICAgICAgICAgIHRoaXMucHJpY2VDaGFydC5zZXRPcHRpb24oew0KICAgICAgICAgICAgeEF4aXM6IHsNCiAgICAgICAgICAgICAgZGF0YTogZGF0ZXMNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICBzZXJpZXM6IFt7DQogICAgICAgICAgICAgIGRhdGE6IHByaWNlVmFsdWVzDQogICAgICAgICAgICB9XQ0KICAgICAgICAgIH0pDQogICAgICAgIH0NCiAgICAgIH0gZmluYWxseSB7DQogICAgICAgIHRoaXMubG9hZGluZy5wcmljZXMgPSBmYWxzZQ0KICAgICAgfQ0KICAgIH0sDQogICAgcmVmcmVzaERhdGEoKSB7DQogICAgICB0aGlzLmZldGNoQml0Y29pblByaWNlcygpDQogICAgICB0aGlzLiRtZXNzYWdlKHsNCiAgICAgICAgbWVzc2FnZTogJ+aVsOaNruW3suWIt+aWsCcsDQogICAgICAgIHR5cGU6ICdzdWNjZXNzJw0KICAgICAgfSkNCiAgICB9LA0KICAgIGNoYW5nZVRpbWVSYW5nZShyYW5nZSkgew0KICAgICAgdGhpcy50aW1lUmFuZ2UgPSByYW5nZQ0KICAgICAgdGhpcy5mZXRjaEJpdGNvaW5QcmljZXMoKQ0KICAgIH0sDQogICAgZm9ybWF0VGltZShkYXRlKSB7DQogICAgICBjb25zdCBob3VycyA9IGRhdGUuZ2V0SG91cnMoKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJykNCiAgICAgIGNvbnN0IG1pbnV0ZXMgPSBkYXRlLmdldE1pbnV0ZXMoKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJykNCiAgICAgIHJldHVybiBgJHtob3Vyc306JHttaW51dGVzfWANCiAgICB9LA0KICAgIHNjcm9sbENoYXRUb0JvdHRvbShyZWYpIHsNCiAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLiRyZWZzW3JlZl07DQogICAgICBpZiAoZWxlbWVudCkgew0KICAgICAgICAvLyDkvb/nlKhzZXRUaW1lb3V056Gu5L+dRE9N5pu05paw5ZCO5YaN5rua5YqoDQogICAgICAgIHNldFRpbWVvdXQoKCkgPT4gew0KICAgICAgICAgIGVsZW1lbnQuc2Nyb2xsVG9wID0gZWxlbWVudC5zY3JvbGxIZWlnaHQ7DQogICAgICAgIH0sIDEwMCk7DQogICAgICB9DQogICAgfSwNCiAgICBhc3luYyBzZW5kQWlNZXNzYWdlKCkgew0KICAgICAgaWYgKCF0aGlzLmFpSW5wdXRNZXNzYWdlLnRyaW0oKSkgcmV0dXJuDQogICAgICANCiAgICAgIC8vIOa3u+WKoOeUqOaIt+a2iOaBrw0KICAgICAgdGhpcy5haU1lc3NhZ2VzLnB1c2goew0KICAgICAgICByb2xlOiAndXNlcicsDQogICAgICAgIGNvbnRlbnQ6IHRoaXMuYWlJbnB1dE1lc3NhZ2UsDQogICAgICAgIHRpbWU6IHRoaXMuZm9ybWF0VGltZShuZXcgRGF0ZSgpKQ0KICAgICAgfSkNCiAgICAgIA0KICAgICAgLy8g5riF56m66L6T5YWl5qGG5bm25rua5Yqo5Yiw5bqV6YOoDQogICAgICBjb25zdCB1c2VyTWVzc2FnZSA9IHRoaXMuYWlJbnB1dE1lc3NhZ2UNCiAgICAgIHRoaXMuYWlJbnB1dE1lc3NhZ2UgPSAnJw0KICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gew0KICAgICAgICB0aGlzLnNjcm9sbENoYXRUb0JvdHRvbSgnY2hhdE1lc3NhZ2VzJykNCiAgICAgIH0pDQogICAgICANCiAgICAgIHRoaXMuYWlMb2FkaW5nID0gdHJ1ZQ0KICAgICAgDQogICAgICAvLyDmmL7npLrkuIDmnaHnrYnlvoXmtojmga8NCiAgICAgIGNvbnN0IHdhaXRpbmdNZXNzYWdlSW5kZXggPSB0aGlzLmFpTWVzc2FnZXMubGVuZ3RoOw0KICAgICAgdGhpcy5haU1lc3NhZ2VzLnB1c2goew0KICAgICAgICByb2xlOiAnYWknLA0KICAgICAgICBjb250ZW50OiAn5q2j5Zyo5aSE55CG5oKo55qE6K+35rGCLi4uJywNCiAgICAgICAgdGltZTogdGhpcy5mb3JtYXRUaW1lKG5ldyBEYXRlKCkpDQogICAgICB9KTsNCiAgICAgIA0KICAgICAgLy8g56Gu5L+d5rua5Yqo5Yiw5bqV6YOoDQogICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7DQogICAgICAgIHRoaXMuc2Nyb2xsQ2hhdFRvQm90dG9tKCdjaGF0TWVzc2FnZXMnKQ0KICAgICAgfSk7DQogICAgICANCiAgICAgIHRyeSB7DQogICAgICAgIC8vIOebtOaOpeiwg+eUqOWQjuerr0FQSQ0KICAgICAgICBjb25zb2xlLmxvZygn5Y+R6YCB6K+35rGC5Yiw5ZCO56uvQVBJOicsIHVzZXJNZXNzYWdlKTsNCiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcyh7DQogICAgICAgICAgbWV0aG9kOiAncG9zdCcsDQogICAgICAgICAgdXJsOiAnL2FwaS9jaGF0JywNCiAgICAgICAgICBkYXRhOiB7IG1lc3NhZ2U6IHVzZXJNZXNzYWdlIH0sDQogICAgICAgICAgdGltZW91dDogMzAwMDANCiAgICAgICAgfSk7DQogICAgICAgIA0KICAgICAgICBjb25zb2xlLmxvZygn5pS25Yiw5ZCO56uvQVBJ5ZON5bqUOicsIHJlc3BvbnNlLmRhdGEpOw0KICAgICAgICANCiAgICAgICAgLy8g5pu05paw562J5b6F5raI5oGvDQogICAgICAgIGlmIChyZXNwb25zZS5kYXRhICYmIHJlc3BvbnNlLmRhdGEucmVzcG9uc2UpIHsNCiAgICAgICAgICB0aGlzLmFpTWVzc2FnZXNbd2FpdGluZ01lc3NhZ2VJbmRleF0gPSB7DQogICAgICAgICAgICByb2xlOiAnYWknLA0KICAgICAgICAgICAgY29udGVudDogcmVzcG9uc2UuZGF0YS5yZXNwb25zZSwNCiAgICAgICAgICAgIHRpbWU6IHRoaXMuZm9ybWF0VGltZShuZXcgRGF0ZSgpKQ0KICAgICAgICAgIH07DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBUEnlk43lupTmoLzlvI/kuI3mraPnoa46ICcgKyBKU09OLnN0cmluZ2lmeShyZXNwb25zZS5kYXRhKSk7DQogICAgICAgIH0NCiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7DQogICAgICAgIGNvbnNvbGUuZXJyb3IoJ+WkhOeQhua2iOaBr+Wksei0pTonLCBlcnJvcik7DQogICAgICAgIA0KICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID0gJ+aKseatie+8jOWkhOeQhuaCqOeahOivt+axguaXtuWHuueOsOS6humXrumimOOAguivt+eojeWQjumHjeivleOAgic7DQogICAgICAgIA0KICAgICAgICAvLyDlpoLmnpzmnIlBUEnov5Tlm57nmoTplJnor6/kv6Hmga/vvIzliJnkvb/nlKjlroMNCiAgICAgICAgaWYgKGVycm9yLnJlc3BvbnNlICYmIGVycm9yLnJlc3BvbnNlLmRhdGEpIHsNCiAgICAgICAgICBjb25zdCBlcnJvckRhdGEgPSBlcnJvci5yZXNwb25zZS5kYXRhOw0KICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0FQSemUmeivr+WTjeW6lDonLCBlcnJvckRhdGEpOw0KICAgICAgICAgIA0KICAgICAgICAgIGlmIChlcnJvckRhdGEuZXJyb3IgJiYgZXJyb3JEYXRhLm1lc3NhZ2UpIHsNCiAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IGDmirHmrYnvvIwke2Vycm9yRGF0YS5lcnJvcn06ICR7ZXJyb3JEYXRhLm1lc3NhZ2V9YDsNCiAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgIC8vIOabtOaWsOetieW+hea2iOaBr+S4uumUmeivr+S/oeaBrw0KICAgICAgICB0aGlzLmFpTWVzc2FnZXNbd2FpdGluZ01lc3NhZ2VJbmRleF0gPSB7DQogICAgICAgICAgcm9sZTogJ2FpJywNCiAgICAgICAgICBjb250ZW50OiBlcnJvck1lc3NhZ2UsDQogICAgICAgICAgdGltZTogdGhpcy5mb3JtYXRUaW1lKG5ldyBEYXRlKCkpDQogICAgICAgIH07DQogICAgICB9IGZpbmFsbHkgew0KICAgICAgICB0aGlzLmFpTG9hZGluZyA9IGZhbHNlOw0KICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7DQogICAgICAgICAgdGhpcy5zY3JvbGxDaGF0VG9Cb3R0b20oJ2NoYXRNZXNzYWdlcycpOw0KICAgICAgICB9KTsNCiAgICAgIH0NCiAgICB9LA0KICAgIGFzeW5jIHNlbmRQcmVkaWN0aW9uUmVxdWVzdCgpIHsNCiAgICAgIGlmICghdGhpcy5wcmVkaWN0aW9uSW5wdXRNZXNzYWdlLnRyaW0oKSkgcmV0dXJuDQogICAgICANCiAgICAgIC8vIOa3u+WKoOeUqOaIt+a2iOaBrw0KICAgICAgdGhpcy5wcmVkaWN0aW9uTWVzc2FnZXMucHVzaCh7DQogICAgICAgIHJvbGU6ICd1c2VyJywNCiAgICAgICAgY29udGVudDogdGhpcy5wcmVkaWN0aW9uSW5wdXRNZXNzYWdlLA0KICAgICAgICB0aW1lOiB0aGlzLmZvcm1hdFRpbWUobmV3IERhdGUoKSkNCiAgICAgIH0pDQogICAgICANCiAgICAgIC8vIOa4heepuui+k+WFpeahhuW5tua7muWKqOWIsOW6lemDqA0KICAgICAgY29uc3QgdXNlck1lc3NhZ2UgPSB0aGlzLnByZWRpY3Rpb25JbnB1dE1lc3NhZ2UNCiAgICAgIHRoaXMucHJlZGljdGlvbklucHV0TWVzc2FnZSA9ICcnDQogICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7DQogICAgICAgIHRoaXMuc2Nyb2xsQ2hhdFRvQm90dG9tKCdwcmVkaWN0aW9uTWVzc2FnZXMnKQ0KICAgICAgfSkNCiAgICAgIA0KICAgICAgdGhpcy5wcmVkaWN0aW9uTG9hZGluZyA9IHRydWUNCiAgICAgIA0KICAgICAgLy8g5pi+56S65LiA5p2h562J5b6F5raI5oGvDQogICAgICBjb25zdCB3YWl0aW5nTWVzc2FnZUluZGV4ID0gdGhpcy5wcmVkaWN0aW9uTWVzc2FnZXMubGVuZ3RoOw0KICAgICAgdGhpcy5wcmVkaWN0aW9uTWVzc2FnZXMucHVzaCh7DQogICAgICAgIHJvbGU6ICdhaScsDQogICAgICAgIGNvbnRlbnQ6ICfmraPlnKjov5vooYzku7fmoLzpooTmtYsuLi4nLA0KICAgICAgICB0aW1lOiB0aGlzLmZvcm1hdFRpbWUobmV3IERhdGUoKSkNCiAgICAgIH0pOw0KICAgICAgDQogICAgICAvLyDnoa7kv53mu5rliqjliLDlupXpg6gNCiAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHsNCiAgICAgICAgdGhpcy5zY3JvbGxDaGF0VG9Cb3R0b20oJ3ByZWRpY3Rpb25NZXNzYWdlcycpDQogICAgICB9KTsNCiAgICAgIA0KICAgICAgdHJ5IHsNCiAgICAgICAgLy8g55u05o6l6LCD55So5ZCO56uv55qE6aKE5rWLQVBJDQogICAgICAgIGNvbnNvbGUubG9nKCflj5HpgIHpooTmtYvor7fmsYLliLDlkI7nq69BUEk6JywgdXNlck1lc3NhZ2UpOw0KICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zKHsNCiAgICAgICAgICBtZXRob2Q6ICdwb3N0JywNCiAgICAgICAgICB1cmw6ICcvYXBpL3ByZWRpY3QnLA0KICAgICAgICAgIGRhdGE6IHsgbWVzc2FnZTogdXNlck1lc3NhZ2UgfSwNCiAgICAgICAgICB0aW1lb3V0OiA2MDAwMA0KICAgICAgICB9KTsNCiAgICAgICAgDQogICAgICAgIGNvbnNvbGUubG9nKCfmlLbliLDpooTmtYtBUEnlk43lupQ6JywgcmVzcG9uc2UuZGF0YSk7DQogICAgICAgIA0KICAgICAgICAvLyDmm7TmlrDnrYnlvoXmtojmga8NCiAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEgJiYgcmVzcG9uc2UuZGF0YS5yZXNwb25zZSkgew0KICAgICAgICAgIHRoaXMucHJlZGljdGlvbk1lc3NhZ2VzW3dhaXRpbmdNZXNzYWdlSW5kZXhdID0gew0KICAgICAgICAgICAgcm9sZTogJ2FpJywNCiAgICAgICAgICAgIGNvbnRlbnQ6IHJlc3BvbnNlLmRhdGEucmVzcG9uc2UsDQogICAgICAgICAgICB0aW1lOiB0aGlzLmZvcm1hdFRpbWUobmV3IERhdGUoKSkNCiAgICAgICAgICB9Ow0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgIHRocm93IG5ldyBFcnJvcign6aKE5rWLQVBJ5ZON5bqU5qC85byP5LiN5q2j56GuOiAnICsgSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UuZGF0YSkpOw0KICAgICAgICB9DQogICAgICB9IGNhdGNoIChlcnJvcikgew0KICAgICAgICBjb25zb2xlLmVycm9yKCfpooTmtYvor7fmsYLlpLHotKU6JywgZXJyb3IpOw0KICAgICAgICANCiAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9ICfmirHmrYnvvIzpooTmtYvmnI3liqHmmoLml7bkuI3lj6/nlKjjgILor7fnqI3lkI7ph43or5XjgIInOw0KICAgICAgICANCiAgICAgICAgLy8g5aaC5p6c5pyJQVBJ6L+U5Zue55qE6ZSZ6K+v5L+h5oGv77yM5YiZ5L2/55So5a6DDQogICAgICAgIGlmIChlcnJvci5yZXNwb25zZSAmJiBlcnJvci5yZXNwb25zZS5kYXRhKSB7DQogICAgICAgICAgY29uc3QgZXJyb3JEYXRhID0gZXJyb3IucmVzcG9uc2UuZGF0YTsNCiAgICAgICAgICBjb25zb2xlLmVycm9yKCdBUEnplJnor6/lk43lupQ6JywgZXJyb3JEYXRhKTsNCiAgICAgICAgICANCiAgICAgICAgICBpZiAoZXJyb3JEYXRhLmVycm9yICYmIGVycm9yRGF0YS5tZXNzYWdlKSB7DQogICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBg5oqx5q2J77yMJHtlcnJvckRhdGEuZXJyb3J9OiAke2Vycm9yRGF0YS5tZXNzYWdlfWA7DQogICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICAvLyDmm7TmlrDnrYnlvoXmtojmga/kuLrplJnor6/kv6Hmga8NCiAgICAgICAgdGhpcy5wcmVkaWN0aW9uTWVzc2FnZXNbd2FpdGluZ01lc3NhZ2VJbmRleF0gPSB7DQogICAgICAgICAgcm9sZTogJ2FpJywNCiAgICAgICAgICBjb250ZW50OiBlcnJvck1lc3NhZ2UsDQogICAgICAgICAgdGltZTogdGhpcy5mb3JtYXRUaW1lKG5ldyBEYXRlKCkpDQogICAgICAgIH07DQogICAgICB9IGZpbmFsbHkgew0KICAgICAgICB0aGlzLnByZWRpY3Rpb25Mb2FkaW5nID0gZmFsc2U7DQogICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHsNCiAgICAgICAgICB0aGlzLnNjcm9sbENoYXRUb0JvdHRvbSgncHJlZGljdGlvbk1lc3NhZ2VzJyk7DQogICAgICAgIH0pOw0KICAgICAgfQ0KICAgIH0sDQogICAgbG9nb3V0KCkgew0KICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2xvZ291dCcpDQogICAgICB0aGlzLiRyb3V0ZXIucHVzaCgnLycpDQogICAgfQ0KICB9DQp9DQo="},{"version":3,"sources":["Dashboard.vue"],"names":[],"mappings":";AAyfile":"Dashboard.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n  <div class=\"dashboard-container\">\r\n    <el-header class=\"header\">\r\n      <div class=\"logo\">\r\n        <img src=\"../assets/bitcoin-logo.png\" alt=\"比特币标志\" class=\"bitcoin-logo\">\r\n        <span>比特币价格预测平台</span>\r\n      </div>\r\n      <div class=\"user-info\">\r\n        <span>欢迎，{{ currentUser.username }}</span>\r\n        <el-button type=\"text\" @click=\"logout\">退出登录</el-button>\r\n      </div>\r\n    </el-header>\r\n    \r\n    <el-main class=\"main-content\">\r\n      <!-- 价格走势图 -->\r\n      <el-card class=\"chart-card\">\r\n        <div slot=\"header\" class=\"chart-header\">\r\n          <span>比特币价格走势（最近7天）</span>\r\n          <div>\r\n            <el-radio-group v-model=\"timeRange\" size=\"small\" @change=\"changeTimeRange\" style=\"margin-right: 15px;\">\r\n              <el-radio-button label=\"1d\">1天</el-radio-button>\r\n              <el-radio-button label=\"7d\">7天</el-radio-button>\r\n              <el-radio-button label=\"30d\">30天</el-radio-button>\r\n            </el-radio-group>\r\n            <el-button type=\"primary\" size=\"small\" @click=\"refreshData\" icon=\"el-icon-refresh\" :loading=\"loading.prices\">刷新数据</el-button>\r\n          </div>\r\n        </div>\r\n        <div ref=\"priceChart\" class=\"price-chart\"></div>\r\n      </el-card>\r\n      \r\n      <!-- 对话框区域 -->\r\n      <div class=\"chat-section\">\r\n        <el-card class=\"chat-card\">\r\n          <div slot=\"header\" class=\"chat-header\">\r\n            <span>加密货币新闻助手</span>\r\n            <el-tooltip content=\"获取最新的加密货币新闻和市场动态\" placement=\"top\">\r\n              <i class=\"el-icon-question\"></i>\r\n            </el-tooltip>\r\n          </div>\r\n          <div class=\"chat-messages\" ref=\"chatMessages\">\r\n            <div v-for=\"(message, index) in aiMessages\" :key=\"index\" \r\n                 :class=\"['message', message.role === 'user' ? 'user-message' : 'ai-message']\">\r\n              <div class=\"message-content\">{{ message.content }}</div>\r\n              <div class=\"message-time\">{{ message.time }}</div>\r\n            </div>\r\n          </div>\r\n          <div class=\"chat-input\">\r\n            <el-input\r\n              v-model=\"aiInputMessage\"\r\n              placeholder=\"询问最新加密货币新闻，例如：'比特币最新消息'\"\r\n              :disabled=\"aiLoading\"\r\n              @keyup.enter.native=\"sendAiMessage\"\r\n            >\r\n              <el-button slot=\"append\" :loading=\"aiLoading\" @click=\"sendAiMessage\">发送</el-button>\r\n            </el-input>\r\n          </div>\r\n        </el-card>\r\n        \r\n        <el-card class=\"chat-card\">\r\n          <div slot=\"header\" class=\"chat-header\">\r\n            <span>价格预测</span>\r\n            <el-tooltip content=\"使用AI模型预测比特币未来价格走势\" placement=\"top\">\r\n              <i class=\"el-icon-question\"></i>\r\n            </el-tooltip>\r\n          </div>\r\n          <div class=\"chat-messages\" ref=\"predictionMessages\">\r\n            <div v-for=\"(message, index) in predictionMessages\" :key=\"index\" \r\n                 :class=\"['message', message.role === 'user' ? 'user-message' : 'ai-message']\">\r\n              <div class=\"message-content\">{{ message.content }}</div>\r\n              <div class=\"message-time\">{{ message.time }}</div>\r\n            </div>\r\n          </div>\r\n          <div class=\"chat-input\">\r\n            <el-input\r\n              v-model=\"predictionInputMessage\"\r\n              placeholder=\"请输入预测参数，例如：'预测未来3天的BTC价格'\"\r\n              :disabled=\"predictionLoading\"\r\n              @keyup.enter.native=\"sendPredictionRequest\"\r\n            >\r\n              <el-button slot=\"append\" :loading=\"predictionLoading\" @click=\"sendPredictionRequest\">预测</el-button>\r\n            </el-input>\r\n          </div>\r\n        </el-card>\r\n      </div>\r\n    </el-main>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts'\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n  name: 'Dashboard',\r\n  data() {\r\n    return {\r\n      priceChart: null,\r\n      aiMessages: [\r\n        {\r\n          role: 'ai',\r\n          content: '您好！我是您的加密货币新闻助手。您可以询问我比特币相关新闻和市场动态。例如，尝试输入\"比特币最新消息\"或\"今日加密货币热点\"。',\r\n          time: this.formatTime(new Date())\r\n        }\r\n      ],\r\n      predictionMessages: [\r\n        {\r\n          role: 'ai',\r\n          content: '欢迎使用比特币价格预测功能。我将结合实时价格数据和新闻情感分析，使用训练好的模型为您提供预测结果。请输入您想要预测的时间范围，例如\"预测未来3天的比特币价格\"。',\r\n          time: this.formatTime(new Date())\r\n        }\r\n      ],\r\n      aiInputMessage: '',\r\n      predictionInputMessage: '',\r\n      aiLoading: false,\r\n      predictionLoading: false,\r\n      bitcoinPrices: [],\r\n      currentUser: {\r\n        username: '用户'\r\n      },\r\n      timeRange: '7d', // 默认显示7天数据\r\n      loading: {\r\n        prices: false,\r\n        prediction: false\r\n      },\r\n      error: null\r\n    }\r\n  },\r\n  mounted() {\r\n    // 从store获取用户信息\r\n    this.currentUser = this.$store.getters.currentUser || { username: '用户' }\r\n    \r\n    // 初始化价格图表\r\n    this.initPriceChart()\r\n    \r\n    // 获取比特币价格数据\r\n    this.fetchBitcoinPrices()\r\n    \r\n    // 滚动聊天框到底部\r\n    this.$nextTick(() => {\r\n      this.scrollChatToBottom('chatMessages')\r\n      this.scrollChatToBottom('predictionMessages')\r\n    })\r\n  },\r\n  updated() {\r\n    // 在组件更新后也滚动到底部\r\n    this.scrollChatToBottom('chatMessages')\r\n    this.scrollChatToBottom('predictionMessages')\r\n  },\r\n  methods: {\r\n    initPriceChart() {\r\n      this.priceChart = echarts.init(this.$refs.priceChart)\r\n      \r\n      const option = {\r\n        tooltip: {\r\n          trigger: 'axis',\r\n          formatter: '{b}<br />{a}: {c} USD'\r\n        },\r\n        xAxis: {\r\n          type: 'category',\r\n          data: [],\r\n          axisTick: {\r\n            alignWithLabel: true\r\n          }\r\n        },\r\n        yAxis: {\r\n          type: 'value',\r\n          scale: true,\r\n          name: '价格 (USD)',\r\n          nameLocation: 'middle',\r\n          nameGap: 30,\r\n          axisLabel: {\r\n            formatter: '{value} USD'\r\n          }\r\n        },\r\n        series: [{\r\n          name: '比特币价格',\r\n          type: 'line',\r\n          smooth: true,\r\n          symbol: 'circle',\r\n          symbolSize: 8,\r\n          data: [],\r\n          itemStyle: {\r\n            color: '#f7931a'\r\n          },\r\n          lineStyle: {\r\n            width: 3,\r\n            shadowColor: 'rgba(247, 147, 26, 0.5)',\r\n            shadowBlur: 10\r\n          },\r\n          areaStyle: {\r\n            color: {\r\n              type: 'linear',\r\n              x: 0,\r\n              y: 0,\r\n              x2: 0,\r\n              y2: 1,\r\n              colorStops: [{\r\n                offset: 0, color: 'rgba(247, 147, 26, 0.5)'\r\n              }, {\r\n                offset: 1, color: 'rgba(247, 147, 26, 0.1)'\r\n              }]\r\n            }\r\n          }\r\n        }]\r\n      }\r\n      \r\n      this.priceChart.setOption(option)\r\n      \r\n      // 响应式调整图表大小\r\n      window.addEventListener('resize', () => {\r\n        this.priceChart.resize()\r\n      })\r\n    },\r\n    async fetchBitcoinPrices() {\r\n      this.loading.prices = true\r\n      \r\n      try {\r\n        // 从Binance API获取数据\r\n        let limit = 30\r\n        let interval = '1d'\r\n        \r\n        if (this.timeRange === '1d') {\r\n          interval = '1h'\r\n          limit = 24\r\n        } else if (this.timeRange === '7d') {\r\n          interval = '4h'\r\n          limit = 42 // 7天 * 6个4小时时段\r\n        } else if (this.timeRange === '30d') {\r\n          interval = '1d'\r\n          limit = 30\r\n        }\r\n        \r\n        const response = await axios.get(`https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=${interval}&limit=${limit}`)\r\n        \r\n        // 处理Binance返回的数据\r\n        const prices = response.data.map(item => {\r\n          const timestamp = item[0]\r\n          const closePrice = parseFloat(item[4])\r\n          const date = new Date(timestamp)\r\n          \r\n          // 根据时间范围格式化日期\r\n          let formattedDate\r\n          if (this.timeRange === '1d') {\r\n            formattedDate = `${date.getHours()}:00`\r\n          } else {\r\n            formattedDate = date.toISOString().split('T')[0]\r\n          }\r\n          \r\n          return {\r\n            date: formattedDate,\r\n            price: closePrice\r\n          }\r\n        })\r\n        \r\n        this.bitcoinPrices = prices\r\n        \r\n        // 更新价格图表\r\n        const dates = prices.map(item => item.date)\r\n        const priceValues = prices.map(item => item.price)\r\n        \r\n        this.priceChart.setOption({\r\n          xAxis: {\r\n            data: dates\r\n          },\r\n          series: [{\r\n            data: priceValues\r\n          }]\r\n        })\r\n        \r\n      } catch (error) {\r\n        console.error('获取比特币价格数据失败:', error)\r\n        this.error = '获取价格数据失败，请稍后重试'\r\n        // 使用模拟数据作为备选\r\n        await this.$store.dispatch('fetchBitcoinPrices')\r\n        const prices = this.$store.getters.bitcoinPrices\r\n        \r\n        if (prices && prices.length) {\r\n          this.bitcoinPrices = prices\r\n          const dates = prices.map(item => item.date)\r\n          const priceValues = prices.map(item => item.price)\r\n          \r\n          this.priceChart.setOption({\r\n            xAxis: {\r\n              data: dates\r\n            },\r\n            series: [{\r\n              data: priceValues\r\n            }]\r\n          })\r\n        }\r\n      } finally {\r\n        this.loading.prices = false\r\n      }\r\n    },\r\n    refreshData() {\r\n      this.fetchBitcoinPrices()\r\n      this.$message({\r\n        message: '数据已刷新',\r\n        type: 'success'\r\n      })\r\n    },\r\n    changeTimeRange(range) {\r\n      this.timeRange = range\r\n      this.fetchBitcoinPrices()\r\n    },\r\n    formatTime(date) {\r\n      const hours = date.getHours().toString().padStart(2, '0')\r\n      const minutes = date.getMinutes().toString().padStart(2, '0')\r\n      return `${hours}:${minutes}`\r\n    },\r\n    scrollChatToBottom(ref) {\r\n      const element = this.$refs[ref];\r\n      if (element) {\r\n        // 使用setTimeout确保DOM更新后再滚动\r\n        setTimeout(() => {\r\n          element.scrollTop = element.scrollHeight;\r\n        }, 100);\r\n      }\r\n    },\r\n    async sendAiMessage() {\r\n      if (!this.aiInputMessage.trim()) return\r\n      \r\n      // 添加用户消息\r\n      this.aiMessages.push({\r\n        role: 'user',\r\n        content: this.aiInputMessage,\r\n        time: this.formatTime(new Date())\r\n      })\r\n      \r\n      // 清空输入框并滚动到底部\r\n      const userMessage = this.aiInputMessage\r\n      this.aiInputMessage = ''\r\n      this.$nextTick(() => {\r\n        this.scrollChatToBottom('chatMessages')\r\n      })\r\n      \r\n      this.aiLoading = true\r\n      \r\n      // 显示一条等待消息\r\n      const waitingMessageIndex = this.aiMessages.length;\r\n      this.aiMessages.push({\r\n        role: 'ai',\r\n        content: '正在处理您的请求...',\r\n        time: this.formatTime(new Date())\r\n      });\r\n      \r\n      // 确保滚动到底部\r\n      this.$nextTick(() => {\r\n        this.scrollChatToBottom('chatMessages')\r\n      });\r\n      \r\n      try {\r\n        // 直接调用后端API\r\n        console.log('发送请求到后端API:', userMessage);\r\n        const response = await axios({\r\n          method: 'post',\r\n          url: '/api/chat',\r\n          data: { message: userMessage },\r\n          timeout: 30000\r\n        });\r\n        \r\n        console.log('收到后端API响应:', response.data);\r\n        \r\n        // 更新等待消息\r\n        if (response.data && response.data.response) {\r\n          this.aiMessages[waitingMessageIndex] = {\r\n            role: 'ai',\r\n            content: response.data.response,\r\n            time: this.formatTime(new Date())\r\n          };\r\n        } else {\r\n          throw new Error('API响应格式不正确: ' + JSON.stringify(response.data));\r\n        }\r\n      } catch (error) {\r\n        console.error('处理消息失败:', error);\r\n        \r\n        let errorMessage = '抱歉，处理您的请求时出现了问题。请稍后重试。';\r\n        \r\n        // 如果有API返回的错误信息，则使用它\r\n        if (error.response && error.response.data) {\r\n          const errorData = error.response.data;\r\n          console.error('API错误响应:', errorData);\r\n          \r\n          if (errorData.error && errorData.message) {\r\n            errorMessage = `抱歉，${errorData.error}: ${errorData.message}`;\r\n          }\r\n        }\r\n        \r\n        // 更新等待消息为错误信息\r\n        this.aiMessages[waitingMessageIndex] = {\r\n          role: 'ai',\r\n          content: errorMessage,\r\n          time: this.formatTime(new Date())\r\n        };\r\n      } finally {\r\n        this.aiLoading = false;\r\n        this.$nextTick(() => {\r\n          this.scrollChatToBottom('chatMessages');\r\n        });\r\n      }\r\n    },\r\n    async sendPredictionRequest() {\r\n      if (!this.predictionInputMessage.trim()) return\r\n      \r\n      // 添加用户消息\r\n      this.predictionMessages.push({\r\n        role: 'user',\r\n        content: this.predictionInputMessage,\r\n        time: this.formatTime(new Date())\r\n      })\r\n      \r\n      // 清空输入框并滚动到底部\r\n      const userMessage = this.predictionInputMessage\r\n      this.predictionInputMessage = ''\r\n      this.$nextTick(() => {\r\n        this.scrollChatToBottom('predictionMessages')\r\n      })\r\n      \r\n      this.predictionLoading = true\r\n      \r\n      // 显示一条等待消息\r\n      const waitingMessageIndex = this.predictionMessages.length;\r\n      this.predictionMessages.push({\r\n        role: 'ai',\r\n        content: '正在进行价格预测...',\r\n        time: this.formatTime(new Date())\r\n      });\r\n      \r\n      // 确保滚动到底部\r\n      this.$nextTick(() => {\r\n        this.scrollChatToBottom('predictionMessages')\r\n      });\r\n      \r\n      try {\r\n        // 直接调用后端的预测API\r\n        console.log('发送预测请求到后端API:', userMessage);\r\n        const response = await axios({\r\n          method: 'post',\r\n          url: '/api/predict',\r\n          data: { message: userMessage },\r\n          timeout: 60000\r\n        });\r\n        \r\n        console.log('收到预测API响应:', response.data);\r\n        \r\n        // 更新等待消息\r\n        if (response.data && response.data.response) {\r\n          this.predictionMessages[waitingMessageIndex] = {\r\n            role: 'ai',\r\n            content: response.data.response,\r\n            time: this.formatTime(new Date())\r\n          };\r\n        } else {\r\n          throw new Error('预测API响应格式不正确: ' + JSON.stringify(response.data));\r\n        }\r\n      } catch (error) {\r\n        console.error('预测请求失败:', error);\r\n        \r\n        let errorMessage = '抱歉，预测服务暂时不可用。请稍后重试。';\r\n        \r\n        // 如果有API返回的错误信息，则使用它\r\n        if (error.response && error.response.data) {\r\n          const errorData = error.response.data;\r\n          console.error('API错误响应:', errorData);\r\n          \r\n          if (errorData.error && errorData.message) {\r\n            errorMessage = `抱歉，${errorData.error}: ${errorData.message}`;\r\n          }\r\n        }\r\n        \r\n        // 更新等待消息为错误信息\r\n        this.predictionMessages[waitingMessageIndex] = {\r\n          role: 'ai',\r\n          content: errorMessage,\r\n          time: this.formatTime(new Date())\r\n        };\r\n      } finally {\r\n        this.predictionLoading = false;\r\n        this.$nextTick(() => {\r\n          this.scrollChatToBottom('predictionMessages');\r\n        });\r\n      }\r\n    },\r\n    logout() {\r\n      this.$store.dispatch('logout')\r\n      this.$router.push('/')\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.dashboard-container {\r\n  min-height: 100vh;\r\n  background-color: #f5f7fa;\r\n}\r\n\r\n.header {\r\n  background-color: #1e1e1e;\r\n  color: white;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 0 20px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.logo {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.bitcoin-logo {\r\n  height: 30px;\r\n  margin-right: 10px;\r\n}\r\n\r\n.user-info {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.user-info span {\r\n  margin-right: 15px;\r\n}\r\n\r\n.main-content {\r\n  padding: 20px;\r\n  max-width: 1400px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.chart-card {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.chart-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.price-chart {\r\n  height: 350px;\r\n  width: 100%;\r\n}\r\n\r\n.chat-section {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(450px, 1fr));\r\n  gap: 20px;\r\n}\r\n\r\n.chat-card {\r\n  height: 500px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-height: 500px;\r\n}\r\n\r\n.chat-header {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.chat-header i {\r\n  margin-left: 8px;\r\n  color: #909399;\r\n  cursor: pointer;\r\n}\r\n\r\n.chat-messages {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 10px;\r\n  background-color: #f9f9f9;\r\n  border-radius: 4px;\r\n  margin-bottom: 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-height: 350px;\r\n}\r\n\r\n.message {\r\n  max-width: 80%;\r\n  margin-bottom: 12px;\r\n  padding: 10px;\r\n  border-radius: 10px;\r\n  position: relative;\r\n}\r\n\r\n.user-message {\r\n  align-self: flex-end;\r\n  background-color: #ecf5ff;\r\n  border: 1px solid #d9ecff;\r\n}\r\n\r\n.ai-message {\r\n  align-self: flex-start;\r\n  background-color: #f4f4f5;\r\n  border: 1px solid #e9e9eb;\r\n}\r\n\r\n.message-content {\r\n  word-wrap: break-word;\r\n  white-space: pre-line;\r\n}\r\n\r\n.message-time {\r\n  font-size: 11px;\r\n  color: #909399;\r\n  margin-top: 4px;\r\n  text-align: right;\r\n}\r\n\r\n.chat-input {\r\n  margin-top: auto;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .chat-section {\r\n    grid-template-columns: 1fr;\r\n  }\r\n}\r\n</style> "]}]}