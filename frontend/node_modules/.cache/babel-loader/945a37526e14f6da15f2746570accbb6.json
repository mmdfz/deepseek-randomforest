{"remainingRequest":"D:\\桌面\\twitterpredict\\frontend\\node_modules\\thread-loader\\dist\\cjs.js!D:\\桌面\\twitterpredict\\frontend\\node_modules\\babel-loader\\lib\\index.js!D:\\桌面\\twitterpredict\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\桌面\\twitterpredict\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\桌面\\twitterpredict\\frontend\\src\\views\\Dashboard.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\桌面\\twitterpredict\\frontend\\src\\views\\Dashboard.vue","mtime":1747150580040},{"path":"D:\\桌面\\twitterpredict\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1747130285089},{"path":"D:\\桌面\\twitterpredict\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1747130285090},{"path":"D:\\桌面\\twitterpredict\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1747130286327},{"path":"D:\\桌面\\twitterpredict\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1747130285089},{"path":"D:\\桌面\\twitterpredict\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1747130265551}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["echarts","axios","name","data","priceChart","aiMessages","role","content","time","formatTime","Date","predictionMessages","aiInputMessage","predictionInputMessage","aiLoading","predictionLoading","bitcoinPrices","currentUser","username","timeRange","loading","prices","prediction","error","mounted","$store","getters","initPriceChart","fetchBitcoinPrices","$nextTick","scrollChatToBottom","updated","methods","init","$refs","option","tooltip","trigger","formatter","xAxis","type","axisTick","alignWithLabel","yAxis","scale","nameLocation","nameGap","axisLabel","series","smooth","symbol","symbolSize","itemStyle","color","lineStyle","width","shadowColor","shadowBlur","areaStyle","x","y","x2","y2","colorStops","offset","setOption","window","addEventListener","resize","limit","interval","response","get","map","item","timestamp","closePrice","parseFloat","date","formattedDate","getHours","toISOString","split","price","dates","priceValues","console","dispatch","length","refreshData","$message","message","changeTimeRange","range","hours","toString","padStart","minutes","getMinutes","ref","element","setTimeout","scrollTop","scrollHeight","sendAiMessage","trim","push","userMessage","waitingMessageIndex","log","method","url","timeout","Error","JSON","stringify","errorMessage","errorData","sendPredictionRequest","logout","$router"],"sources":["src/views/Dashboard.vue"],"sourcesContent":["<template>\r\n  <div class=\"dashboard-container\">\r\n    <el-header class=\"header\">\r\n      <div class=\"logo\">\r\n        <img src=\"../assets/bitcoin-logo.png\" alt=\"比特币标志\" class=\"bitcoin-logo\">\r\n        <span>比特币价格预测平台</span>\r\n      </div>\r\n      <div class=\"user-info\">\r\n        <span>欢迎，{{ currentUser.username }}</span>\r\n        <el-button type=\"text\" @click=\"logout\">退出登录</el-button>\r\n      </div>\r\n    </el-header>\r\n    \r\n    <el-main class=\"main-content\">\r\n      <!-- 价格走势图 -->\r\n      <el-card class=\"chart-card\">\r\n        <div slot=\"header\" class=\"chart-header\">\r\n          <span>比特币价格走势（最近7天）</span>\r\n          <div>\r\n            <el-radio-group v-model=\"timeRange\" size=\"small\" @change=\"changeTimeRange\" style=\"margin-right: 15px;\">\r\n              <el-radio-button label=\"1d\">1天</el-radio-button>\r\n              <el-radio-button label=\"7d\">7天</el-radio-button>\r\n              <el-radio-button label=\"30d\">30天</el-radio-button>\r\n            </el-radio-group>\r\n            <el-button type=\"primary\" size=\"small\" @click=\"refreshData\" icon=\"el-icon-refresh\" :loading=\"loading.prices\">刷新数据</el-button>\r\n          </div>\r\n        </div>\r\n        <div ref=\"priceChart\" class=\"price-chart\"></div>\r\n      </el-card>\r\n      \r\n      <!-- 对话框区域 -->\r\n      <div class=\"chat-section\">\r\n        <el-card class=\"chat-card\">\r\n          <div slot=\"header\" class=\"chat-header\">\r\n            <span>加密货币新闻助手</span>\r\n            <el-tooltip content=\"获取最新的加密货币新闻和市场动态\" placement=\"top\">\r\n              <i class=\"el-icon-question\"></i>\r\n            </el-tooltip>\r\n          </div>\r\n          <div class=\"chat-messages\" ref=\"chatMessages\">\r\n            <div v-for=\"(message, index) in aiMessages\" :key=\"index\" \r\n                 :class=\"['message', message.role === 'user' ? 'user-message' : 'ai-message']\">\r\n              <div class=\"message-content\">{{ message.content }}</div>\r\n              <div class=\"message-time\">{{ message.time }}</div>\r\n            </div>\r\n          </div>\r\n          <div class=\"chat-input\">\r\n            <el-input\r\n              v-model=\"aiInputMessage\"\r\n              placeholder=\"询问最新加密货币新闻，例如：'比特币最新消息'\"\r\n              :disabled=\"aiLoading\"\r\n              @keyup.enter.native=\"sendAiMessage\"\r\n            >\r\n              <el-button slot=\"append\" :loading=\"aiLoading\" @click=\"sendAiMessage\">发送</el-button>\r\n            </el-input>\r\n          </div>\r\n        </el-card>\r\n        \r\n        <el-card class=\"chat-card\">\r\n          <div slot=\"header\" class=\"chat-header\">\r\n            <span>价格预测</span>\r\n            <el-tooltip content=\"使用AI模型预测比特币未来价格走势\" placement=\"top\">\r\n              <i class=\"el-icon-question\"></i>\r\n            </el-tooltip>\r\n          </div>\r\n          <div class=\"chat-messages\" ref=\"predictionMessages\">\r\n            <div v-for=\"(message, index) in predictionMessages\" :key=\"index\" \r\n                 :class=\"['message', message.role === 'user' ? 'user-message' : 'ai-message']\">\r\n              <div class=\"message-content\">{{ message.content }}</div>\r\n              <div class=\"message-time\">{{ message.time }}</div>\r\n            </div>\r\n          </div>\r\n          <div class=\"chat-input\">\r\n            <el-input\r\n              v-model=\"predictionInputMessage\"\r\n              placeholder=\"请输入预测参数，例如：'预测未来3天的BTC价格'\"\r\n              :disabled=\"predictionLoading\"\r\n              @keyup.enter.native=\"sendPredictionRequest\"\r\n            >\r\n              <el-button slot=\"append\" :loading=\"predictionLoading\" @click=\"sendPredictionRequest\">预测</el-button>\r\n            </el-input>\r\n          </div>\r\n        </el-card>\r\n      </div>\r\n    </el-main>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts'\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n  name: 'Dashboard',\r\n  data() {\r\n    return {\r\n      priceChart: null,\r\n      aiMessages: [\r\n        {\r\n          role: 'ai',\r\n          content: '您好！我是您的加密货币新闻助手。您可以询问我比特币相关新闻和市场动态。例如，尝试输入\"比特币最新消息\"或\"今日加密货币热点\"。',\r\n          time: this.formatTime(new Date())\r\n        }\r\n      ],\r\n      predictionMessages: [\r\n        {\r\n          role: 'ai',\r\n          content: '欢迎使用比特币价格预测功能。我将结合实时价格数据和新闻情感分析，使用训练好的模型为您提供预测结果。请输入您想要预测的时间范围，例如\"预测未来3天的比特币价格\"。',\r\n          time: this.formatTime(new Date())\r\n        }\r\n      ],\r\n      aiInputMessage: '',\r\n      predictionInputMessage: '',\r\n      aiLoading: false,\r\n      predictionLoading: false,\r\n      bitcoinPrices: [],\r\n      currentUser: {\r\n        username: '用户'\r\n      },\r\n      timeRange: '7d', // 默认显示7天数据\r\n      loading: {\r\n        prices: false,\r\n        prediction: false\r\n      },\r\n      error: null\r\n    }\r\n  },\r\n  mounted() {\r\n    // 从store获取用户信息\r\n    this.currentUser = this.$store.getters.currentUser || { username: '用户' }\r\n    \r\n    // 初始化价格图表\r\n    this.initPriceChart()\r\n    \r\n    // 获取比特币价格数据\r\n    this.fetchBitcoinPrices()\r\n    \r\n    // 滚动聊天框到底部\r\n    this.$nextTick(() => {\r\n      this.scrollChatToBottom('chatMessages')\r\n      this.scrollChatToBottom('predictionMessages')\r\n    })\r\n  },\r\n  updated() {\r\n    // 在组件更新后也滚动到底部\r\n    this.scrollChatToBottom('chatMessages')\r\n    this.scrollChatToBottom('predictionMessages')\r\n  },\r\n  methods: {\r\n    initPriceChart() {\r\n      this.priceChart = echarts.init(this.$refs.priceChart)\r\n      \r\n      const option = {\r\n        tooltip: {\r\n          trigger: 'axis',\r\n          formatter: '{b}<br />{a}: {c} USD'\r\n        },\r\n        xAxis: {\r\n          type: 'category',\r\n          data: [],\r\n          axisTick: {\r\n            alignWithLabel: true\r\n          }\r\n        },\r\n        yAxis: {\r\n          type: 'value',\r\n          scale: true,\r\n          name: '价格 (USD)',\r\n          nameLocation: 'middle',\r\n          nameGap: 30,\r\n          axisLabel: {\r\n            formatter: '{value} USD'\r\n          }\r\n        },\r\n        series: [{\r\n          name: '比特币价格',\r\n          type: 'line',\r\n          smooth: true,\r\n          symbol: 'circle',\r\n          symbolSize: 8,\r\n          data: [],\r\n          itemStyle: {\r\n            color: '#f7931a'\r\n          },\r\n          lineStyle: {\r\n            width: 3,\r\n            shadowColor: 'rgba(247, 147, 26, 0.5)',\r\n            shadowBlur: 10\r\n          },\r\n          areaStyle: {\r\n            color: {\r\n              type: 'linear',\r\n              x: 0,\r\n              y: 0,\r\n              x2: 0,\r\n              y2: 1,\r\n              colorStops: [{\r\n                offset: 0, color: 'rgba(247, 147, 26, 0.5)'\r\n              }, {\r\n                offset: 1, color: 'rgba(247, 147, 26, 0.1)'\r\n              }]\r\n            }\r\n          }\r\n        }]\r\n      }\r\n      \r\n      this.priceChart.setOption(option)\r\n      \r\n      // 响应式调整图表大小\r\n      window.addEventListener('resize', () => {\r\n        this.priceChart.resize()\r\n      })\r\n    },\r\n    async fetchBitcoinPrices() {\r\n      this.loading.prices = true\r\n      \r\n      try {\r\n        // 从Binance API获取数据\r\n        let limit = 30\r\n        let interval = '1d'\r\n        \r\n        if (this.timeRange === '1d') {\r\n          interval = '1h'\r\n          limit = 24\r\n        } else if (this.timeRange === '7d') {\r\n          interval = '4h'\r\n          limit = 42 // 7天 * 6个4小时时段\r\n        } else if (this.timeRange === '30d') {\r\n          interval = '1d'\r\n          limit = 30\r\n        }\r\n        \r\n        const response = await axios.get(`https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=${interval}&limit=${limit}`)\r\n        \r\n        // 处理Binance返回的数据\r\n        const prices = response.data.map(item => {\r\n          const timestamp = item[0]\r\n          const closePrice = parseFloat(item[4])\r\n          const date = new Date(timestamp)\r\n          \r\n          // 根据时间范围格式化日期\r\n          let formattedDate\r\n          if (this.timeRange === '1d') {\r\n            formattedDate = `${date.getHours()}:00`\r\n          } else {\r\n            formattedDate = date.toISOString().split('T')[0]\r\n          }\r\n          \r\n          return {\r\n            date: formattedDate,\r\n            price: closePrice\r\n          }\r\n        })\r\n        \r\n        this.bitcoinPrices = prices\r\n        \r\n        // 更新价格图表\r\n        const dates = prices.map(item => item.date)\r\n        const priceValues = prices.map(item => item.price)\r\n        \r\n        this.priceChart.setOption({\r\n          xAxis: {\r\n            data: dates\r\n          },\r\n          series: [{\r\n            data: priceValues\r\n          }]\r\n        })\r\n        \r\n      } catch (error) {\r\n        console.error('获取比特币价格数据失败:', error)\r\n        this.error = '获取价格数据失败，请稍后重试'\r\n        // 使用模拟数据作为备选\r\n        await this.$store.dispatch('fetchBitcoinPrices')\r\n        const prices = this.$store.getters.bitcoinPrices\r\n        \r\n        if (prices && prices.length) {\r\n          this.bitcoinPrices = prices\r\n          const dates = prices.map(item => item.date)\r\n          const priceValues = prices.map(item => item.price)\r\n          \r\n          this.priceChart.setOption({\r\n            xAxis: {\r\n              data: dates\r\n            },\r\n            series: [{\r\n              data: priceValues\r\n            }]\r\n          })\r\n        }\r\n      } finally {\r\n        this.loading.prices = false\r\n      }\r\n    },\r\n    refreshData() {\r\n      this.fetchBitcoinPrices()\r\n      this.$message({\r\n        message: '数据已刷新',\r\n        type: 'success'\r\n      })\r\n    },\r\n    changeTimeRange(range) {\r\n      this.timeRange = range\r\n      this.fetchBitcoinPrices()\r\n    },\r\n    formatTime(date) {\r\n      const hours = date.getHours().toString().padStart(2, '0')\r\n      const minutes = date.getMinutes().toString().padStart(2, '0')\r\n      return `${hours}:${minutes}`\r\n    },\r\n    scrollChatToBottom(ref) {\r\n      const element = this.$refs[ref];\r\n      if (element) {\r\n        // 使用setTimeout确保DOM更新后再滚动\r\n        setTimeout(() => {\r\n          element.scrollTop = element.scrollHeight;\r\n        }, 100);\r\n      }\r\n    },\r\n    async sendAiMessage() {\r\n      if (!this.aiInputMessage.trim()) return\r\n      \r\n      // 添加用户消息\r\n      this.aiMessages.push({\r\n        role: 'user',\r\n        content: this.aiInputMessage,\r\n        time: this.formatTime(new Date())\r\n      })\r\n      \r\n      // 清空输入框并滚动到底部\r\n      const userMessage = this.aiInputMessage\r\n      this.aiInputMessage = ''\r\n      this.$nextTick(() => {\r\n        this.scrollChatToBottom('chatMessages')\r\n      })\r\n      \r\n      this.aiLoading = true\r\n      \r\n      // 显示一条等待消息\r\n      const waitingMessageIndex = this.aiMessages.length;\r\n      this.aiMessages.push({\r\n        role: 'ai',\r\n        content: '正在处理您的请求...',\r\n        time: this.formatTime(new Date())\r\n      });\r\n      \r\n      // 确保滚动到底部\r\n      this.$nextTick(() => {\r\n        this.scrollChatToBottom('chatMessages')\r\n      });\r\n      \r\n      try {\r\n        // 直接调用后端API\r\n        console.log('发送请求到后端API:', userMessage);\r\n        const response = await axios({\r\n          method: 'post',\r\n          url: '/api/chat',\r\n          data: { message: userMessage },\r\n          timeout: 30000\r\n        });\r\n        \r\n        console.log('收到后端API响应:', response.data);\r\n        \r\n        // 更新等待消息\r\n        if (response.data && response.data.response) {\r\n          this.aiMessages[waitingMessageIndex] = {\r\n            role: 'ai',\r\n            content: response.data.response,\r\n            time: this.formatTime(new Date())\r\n          };\r\n        } else {\r\n          throw new Error('API响应格式不正确: ' + JSON.stringify(response.data));\r\n        }\r\n      } catch (error) {\r\n        console.error('处理消息失败:', error);\r\n        \r\n        let errorMessage = '抱歉，处理您的请求时出现了问题。请稍后重试。';\r\n        \r\n        // 如果有API返回的错误信息，则使用它\r\n        if (error.response && error.response.data) {\r\n          const errorData = error.response.data;\r\n          console.error('API错误响应:', errorData);\r\n          \r\n          if (errorData.error && errorData.message) {\r\n            errorMessage = `抱歉，${errorData.error}: ${errorData.message}`;\r\n          }\r\n        }\r\n        \r\n        // 更新等待消息为错误信息\r\n        this.aiMessages[waitingMessageIndex] = {\r\n          role: 'ai',\r\n          content: errorMessage,\r\n          time: this.formatTime(new Date())\r\n        };\r\n      } finally {\r\n        this.aiLoading = false;\r\n        this.$nextTick(() => {\r\n          this.scrollChatToBottom('chatMessages');\r\n        });\r\n      }\r\n    },\r\n    async sendPredictionRequest() {\r\n      if (!this.predictionInputMessage.trim()) return\r\n      \r\n      // 添加用户消息\r\n      this.predictionMessages.push({\r\n        role: 'user',\r\n        content: this.predictionInputMessage,\r\n        time: this.formatTime(new Date())\r\n      })\r\n      \r\n      // 清空输入框并滚动到底部\r\n      const userMessage = this.predictionInputMessage\r\n      this.predictionInputMessage = ''\r\n      this.$nextTick(() => {\r\n        this.scrollChatToBottom('predictionMessages')\r\n      })\r\n      \r\n      this.predictionLoading = true\r\n      \r\n      // 显示一条等待消息\r\n      const waitingMessageIndex = this.predictionMessages.length;\r\n      this.predictionMessages.push({\r\n        role: 'ai',\r\n        content: '正在进行价格预测...',\r\n        time: this.formatTime(new Date())\r\n      });\r\n      \r\n      // 确保滚动到底部\r\n      this.$nextTick(() => {\r\n        this.scrollChatToBottom('predictionMessages')\r\n      });\r\n      \r\n      try {\r\n        // 直接调用后端的预测API\r\n        console.log('发送预测请求到后端API:', userMessage);\r\n        const response = await axios({\r\n          method: 'post',\r\n          url: '/api/predict',\r\n          data: { message: userMessage },\r\n          timeout: 60000\r\n        });\r\n        \r\n        console.log('收到预测API响应:', response.data);\r\n        \r\n        // 更新等待消息\r\n        if (response.data && response.data.response) {\r\n          this.predictionMessages[waitingMessageIndex] = {\r\n            role: 'ai',\r\n            content: response.data.response,\r\n            time: this.formatTime(new Date())\r\n          };\r\n        } else {\r\n          throw new Error('预测API响应格式不正确: ' + JSON.stringify(response.data));\r\n        }\r\n      } catch (error) {\r\n        console.error('预测请求失败:', error);\r\n        \r\n        let errorMessage = '抱歉，预测服务暂时不可用。请稍后重试。';\r\n        \r\n        // 如果有API返回的错误信息，则使用它\r\n        if (error.response && error.response.data) {\r\n          const errorData = error.response.data;\r\n          console.error('API错误响应:', errorData);\r\n          \r\n          if (errorData.error && errorData.message) {\r\n            errorMessage = `抱歉，${errorData.error}: ${errorData.message}`;\r\n          }\r\n        }\r\n        \r\n        // 更新等待消息为错误信息\r\n        this.predictionMessages[waitingMessageIndex] = {\r\n          role: 'ai',\r\n          content: errorMessage,\r\n          time: this.formatTime(new Date())\r\n        };\r\n      } finally {\r\n        this.predictionLoading = false;\r\n        this.$nextTick(() => {\r\n          this.scrollChatToBottom('predictionMessages');\r\n        });\r\n      }\r\n    },\r\n    logout() {\r\n      this.$store.dispatch('logout')\r\n      this.$router.push('/')\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.dashboard-container {\r\n  min-height: 100vh;\r\n  background-color: #f5f7fa;\r\n}\r\n\r\n.header {\r\n  background-color: #1e1e1e;\r\n  color: white;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 0 20px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.logo {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.bitcoin-logo {\r\n  height: 30px;\r\n  margin-right: 10px;\r\n}\r\n\r\n.user-info {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.user-info span {\r\n  margin-right: 15px;\r\n}\r\n\r\n.main-content {\r\n  padding: 20px;\r\n  max-width: 1400px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.chart-card {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.chart-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.price-chart {\r\n  height: 350px;\r\n  width: 100%;\r\n}\r\n\r\n.chat-section {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(450px, 1fr));\r\n  gap: 20px;\r\n}\r\n\r\n.chat-card {\r\n  height: 500px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-height: 500px;\r\n}\r\n\r\n.chat-header {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.chat-header i {\r\n  margin-left: 8px;\r\n  color: #909399;\r\n  cursor: pointer;\r\n}\r\n\r\n.chat-messages {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 10px;\r\n  background-color: #f9f9f9;\r\n  border-radius: 4px;\r\n  margin-bottom: 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-height: 350px;\r\n}\r\n\r\n.message {\r\n  max-width: 80%;\r\n  margin-bottom: 12px;\r\n  padding: 10px;\r\n  border-radius: 10px;\r\n  position: relative;\r\n}\r\n\r\n.user-message {\r\n  align-self: flex-end;\r\n  background-color: #ecf5ff;\r\n  border: 1px solid #d9ecff;\r\n}\r\n\r\n.ai-message {\r\n  align-self: flex-start;\r\n  background-color: #f4f4f5;\r\n  border: 1px solid #e9e9eb;\r\n}\r\n\r\n.message-content {\r\n  word-wrap: break-word;\r\n  white-space: pre-line;\r\n}\r\n\r\n.message-time {\r\n  font-size: 11px;\r\n  color: #909399;\r\n  margin-top: 4px;\r\n  text-align: right;\r\n}\r\n\r\n.chat-input {\r\n  margin-top: auto;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .chat-section {\r\n    grid-template-columns: 1fr;\r\n  }\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]}]}