{"remainingRequest":"D:\\桌面\\twitterpredict\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\桌面\\twitterpredict\\frontend\\src\\views\\Dashboard.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\桌面\\twitterpredict\\frontend\\src\\views\\Dashboard.vue","mtime":1747146069930},{"path":"D:\\桌面\\twitterpredict\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1747130285089},{"path":"D:\\桌面\\twitterpredict\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1747130286327},{"path":"D:\\桌面\\twitterpredict\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1747130285089},{"path":"D:\\桌面\\twitterpredict\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1747130265551}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Dashboard.vue"],"names":[],"mappings":";AAyfile":"Dashboard.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n  <div class=\"dashboard-container\">\r\n    <el-header class=\"header\">\r\n      <div class=\"logo\">\r\n        <img src=\"../assets/bitcoin-logo.png\" alt=\"比特币标志\" class=\"bitcoin-logo\">\r\n        <span>比特币价格预测平台</span>\r\n      </div>\r\n      <div class=\"user-info\">\r\n        <span>欢迎，{{ currentUser.username }}</span>\r\n        <el-button type=\"text\" @click=\"logout\">退出登录</el-button>\r\n      </div>\r\n    </el-header>\r\n    \r\n    <el-main class=\"main-content\">\r\n      <!-- 价格走势图 -->\r\n      <el-card class=\"chart-card\">\r\n        <div slot=\"header\" class=\"chart-header\">\r\n          <span>比特币价格走势（最近7天）</span>\r\n          <div>\r\n            <el-radio-group v-model=\"timeRange\" size=\"small\" @change=\"changeTimeRange\" style=\"margin-right: 15px;\">\r\n              <el-radio-button label=\"1d\">1天</el-radio-button>\r\n              <el-radio-button label=\"7d\">7天</el-radio-button>\r\n              <el-radio-button label=\"30d\">30天</el-radio-button>\r\n            </el-radio-group>\r\n            <el-button type=\"primary\" size=\"small\" @click=\"refreshData\" icon=\"el-icon-refresh\" :loading=\"loading.prices\">刷新数据</el-button>\r\n          </div>\r\n        </div>\r\n        <div ref=\"priceChart\" class=\"price-chart\"></div>\r\n      </el-card>\r\n      \r\n      <!-- 对话框区域 -->\r\n      <div class=\"chat-section\">\r\n        <el-card class=\"chat-card\">\r\n          <div slot=\"header\" class=\"chat-header\">\r\n            <span>加密货币新闻助手</span>\r\n            <el-tooltip content=\"获取最新的加密货币新闻和市场动态\" placement=\"top\">\r\n              <i class=\"el-icon-question\"></i>\r\n            </el-tooltip>\r\n          </div>\r\n          <div class=\"chat-messages\" ref=\"chatMessages\">\r\n            <div v-for=\"(message, index) in aiMessages\" :key=\"index\" \r\n                 :class=\"['message', message.role === 'user' ? 'user-message' : 'ai-message']\">\r\n              <div class=\"message-content\">{{ message.content }}</div>\r\n              <div class=\"message-time\">{{ message.time }}</div>\r\n            </div>\r\n          </div>\r\n          <div class=\"chat-input\">\r\n            <el-input\r\n              v-model=\"aiInputMessage\"\r\n              placeholder=\"询问最新加密货币新闻，例如：'比特币最新消息'\"\r\n              :disabled=\"aiLoading\"\r\n              @keyup.enter.native=\"sendAiMessage\"\r\n            >\r\n              <el-button slot=\"append\" :loading=\"aiLoading\" @click=\"sendAiMessage\">发送</el-button>\r\n            </el-input>\r\n          </div>\r\n        </el-card>\r\n        \r\n        <el-card class=\"chat-card\">\r\n          <div slot=\"header\" class=\"chat-header\">\r\n            <span>价格预测</span>\r\n            <el-tooltip content=\"使用AI模型预测比特币未来价格走势\" placement=\"top\">\r\n              <i class=\"el-icon-question\"></i>\r\n            </el-tooltip>\r\n          </div>\r\n          <div class=\"chat-messages\" ref=\"predictionMessages\">\r\n            <div v-for=\"(message, index) in predictionMessages\" :key=\"index\" \r\n                 :class=\"['message', message.role === 'user' ? 'user-message' : 'ai-message']\">\r\n              <div class=\"message-content\">{{ message.content }}</div>\r\n              <div class=\"message-time\">{{ message.time }}</div>\r\n            </div>\r\n          </div>\r\n          <div class=\"chat-input\">\r\n            <el-input\r\n              v-model=\"predictionInputMessage\"\r\n              placeholder=\"请输入预测参数，例如：'预测未来3天的BTC价格'\"\r\n              :disabled=\"predictionLoading\"\r\n              @keyup.enter.native=\"sendPredictionRequest\"\r\n            >\r\n              <el-button slot=\"append\" :loading=\"predictionLoading\" @click=\"sendPredictionRequest\">预测</el-button>\r\n            </el-input>\r\n          </div>\r\n        </el-card>\r\n      </div>\r\n    </el-main>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts'\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n  name: 'Dashboard',\r\n  data() {\r\n    return {\r\n      priceChart: null,\r\n      aiMessages: [\r\n        {\r\n          role: 'ai',\r\n          content: '您好！我是您的加密货币新闻助手。您可以询问我比特币相关新闻和市场动态。例如，尝试输入\"比特币最新消息\"或\"今日加密货币热点\"。',\r\n          time: this.formatTime(new Date())\r\n        }\r\n      ],\r\n      predictionMessages: [\r\n        {\r\n          role: 'ai',\r\n          content: '欢迎使用比特币价格预测功能。我将结合实时价格数据和新闻情感分析，使用训练好的模型为您提供预测结果。请输入您想要预测的时间范围，例如\"预测未来3天的比特币价格\"。',\r\n          time: this.formatTime(new Date())\r\n        }\r\n      ],\r\n      aiInputMessage: '',\r\n      predictionInputMessage: '',\r\n      aiLoading: false,\r\n      predictionLoading: false,\r\n      bitcoinPrices: [],\r\n      currentUser: {\r\n        username: '用户'\r\n      },\r\n      timeRange: '7d', // 默认显示7天数据\r\n      loading: {\r\n        prices: false,\r\n        prediction: false\r\n      },\r\n      error: null\r\n    }\r\n  },\r\n  mounted() {\r\n    // 从store获取用户信息\r\n    this.currentUser = this.$store.getters.currentUser || { username: '用户' }\r\n    \r\n    // 初始化价格图表\r\n    this.initPriceChart()\r\n    \r\n    // 获取比特币价格数据\r\n    this.fetchBitcoinPrices()\r\n    \r\n    // 滚动聊天框到底部\r\n    this.$nextTick(() => {\r\n      this.scrollChatToBottom('chatMessages')\r\n      this.scrollChatToBottom('predictionMessages')\r\n    })\r\n  },\r\n  updated() {\r\n    // 在组件更新后也滚动到底部\r\n    this.scrollChatToBottom('chatMessages')\r\n    this.scrollChatToBottom('predictionMessages')\r\n  },\r\n  methods: {\r\n    initPriceChart() {\r\n      this.priceChart = echarts.init(this.$refs.priceChart)\r\n      \r\n      const option = {\r\n        tooltip: {\r\n          trigger: 'axis',\r\n          formatter: '{b}<br />{a}: {c} USD'\r\n        },\r\n        xAxis: {\r\n          type: 'category',\r\n          data: [],\r\n          axisTick: {\r\n            alignWithLabel: true\r\n          }\r\n        },\r\n        yAxis: {\r\n          type: 'value',\r\n          scale: true,\r\n          name: '价格 (USD)',\r\n          nameLocation: 'middle',\r\n          nameGap: 30,\r\n          axisLabel: {\r\n            formatter: '{value} USD'\r\n          }\r\n        },\r\n        series: [{\r\n          name: '比特币价格',\r\n          type: 'line',\r\n          smooth: true,\r\n          symbol: 'circle',\r\n          symbolSize: 8,\r\n          data: [],\r\n          itemStyle: {\r\n            color: '#f7931a'\r\n          },\r\n          lineStyle: {\r\n            width: 3,\r\n            shadowColor: 'rgba(247, 147, 26, 0.5)',\r\n            shadowBlur: 10\r\n          },\r\n          areaStyle: {\r\n            color: {\r\n              type: 'linear',\r\n              x: 0,\r\n              y: 0,\r\n              x2: 0,\r\n              y2: 1,\r\n              colorStops: [{\r\n                offset: 0, color: 'rgba(247, 147, 26, 0.5)'\r\n              }, {\r\n                offset: 1, color: 'rgba(247, 147, 26, 0.1)'\r\n              }]\r\n            }\r\n          }\r\n        }]\r\n      }\r\n      \r\n      this.priceChart.setOption(option)\r\n      \r\n      // 响应式调整图表大小\r\n      window.addEventListener('resize', () => {\r\n        this.priceChart.resize()\r\n      })\r\n    },\r\n    async fetchBitcoinPrices() {\r\n      this.loading.prices = true\r\n      \r\n      try {\r\n        // 从Binance API获取数据\r\n        let limit = 30\r\n        let interval = '1d'\r\n        \r\n        if (this.timeRange === '1d') {\r\n          interval = '1h'\r\n          limit = 24\r\n        } else if (this.timeRange === '7d') {\r\n          interval = '4h'\r\n          limit = 42 // 7天 * 6个4小时时段\r\n        } else if (this.timeRange === '30d') {\r\n          interval = '1d'\r\n          limit = 30\r\n        }\r\n        \r\n        const response = await axios.get(`https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=${interval}&limit=${limit}`)\r\n        \r\n        // 处理Binance返回的数据\r\n        const prices = response.data.map(item => {\r\n          const timestamp = item[0]\r\n          const closePrice = parseFloat(item[4])\r\n          const date = new Date(timestamp)\r\n          \r\n          // 根据时间范围格式化日期\r\n          let formattedDate\r\n          if (this.timeRange === '1d') {\r\n            formattedDate = `${date.getHours()}:00`\r\n          } else {\r\n            formattedDate = date.toISOString().split('T')[0]\r\n          }\r\n          \r\n          return {\r\n            date: formattedDate,\r\n            price: closePrice\r\n          }\r\n        })\r\n        \r\n        this.bitcoinPrices = prices\r\n        \r\n        // 更新价格图表\r\n        const dates = prices.map(item => item.date)\r\n        const priceValues = prices.map(item => item.price)\r\n        \r\n        this.priceChart.setOption({\r\n          xAxis: {\r\n            data: dates\r\n          },\r\n          series: [{\r\n            data: priceValues\r\n          }]\r\n        })\r\n        \r\n      } catch (error) {\r\n        console.error('获取比特币价格数据失败:', error)\r\n        this.error = '获取价格数据失败，请稍后重试'\r\n        // 使用模拟数据作为备选\r\n        await this.$store.dispatch('fetchBitcoinPrices')\r\n        const prices = this.$store.getters.bitcoinPrices\r\n        \r\n        if (prices && prices.length) {\r\n          this.bitcoinPrices = prices\r\n          const dates = prices.map(item => item.date)\r\n          const priceValues = prices.map(item => item.price)\r\n          \r\n          this.priceChart.setOption({\r\n            xAxis: {\r\n              data: dates\r\n            },\r\n            series: [{\r\n              data: priceValues\r\n            }]\r\n          })\r\n        }\r\n      } finally {\r\n        this.loading.prices = false\r\n      }\r\n    },\r\n    refreshData() {\r\n      this.fetchBitcoinPrices()\r\n      this.$message({\r\n        message: '数据已刷新',\r\n        type: 'success'\r\n      })\r\n    },\r\n    changeTimeRange(range) {\r\n      this.timeRange = range\r\n      this.fetchBitcoinPrices()\r\n    },\r\n    formatTime(date) {\r\n      const hours = date.getHours().toString().padStart(2, '0')\r\n      const minutes = date.getMinutes().toString().padStart(2, '0')\r\n      return `${hours}:${minutes}`\r\n    },\r\n    scrollChatToBottom(ref) {\r\n      const element = this.$refs[ref];\r\n      if (element) {\r\n        // 使用setTimeout确保DOM更新后再滚动\r\n        setTimeout(() => {\r\n          element.scrollTop = element.scrollHeight;\r\n        }, 100);\r\n      }\r\n    },\r\n    async sendAiMessage() {\r\n      if (!this.aiInputMessage.trim()) return\r\n      \r\n      // 添加用户消息\r\n      this.aiMessages.push({\r\n        role: 'user',\r\n        content: this.aiInputMessage,\r\n        time: this.formatTime(new Date())\r\n      })\r\n      \r\n      // 清空输入框并滚动到底部\r\n      const userMessage = this.aiInputMessage\r\n      this.aiInputMessage = ''\r\n      this.$nextTick(() => {\r\n        this.scrollChatToBottom('chatMessages')\r\n      })\r\n      \r\n      this.aiLoading = true\r\n      \r\n      try {\r\n        // 检查是否是询问比特币新闻的请求\r\n        const isNewsQuery = userMessage.toLowerCase().includes('比特币') && \r\n                            (userMessage.toLowerCase().includes('新闻') || \r\n                             userMessage.toLowerCase().includes('消息') || \r\n                             userMessage.toLowerCase().includes('最新') ||\r\n                             userMessage.toLowerCase().includes('热点') ||\r\n                             userMessage.toLowerCase().includes('趋势'));\r\n        \r\n        let response = '';\r\n        \r\n        if (isNewsQuery) {\r\n          // 如果是新闻查询，调用后端API获取最新比特币新闻\r\n          try {\r\n            const result = await axios.get('/api/news');\r\n            if (result.data && result.data.news && result.data.news.length > 0) {\r\n              // 格式化新闻信息\r\n              const newsList = result.data.news;\r\n              const newsText = newsList.map(news => \r\n                `标题: ${news.title}\\n来源: ${news.source}\\n链接: ${news.url}\\n`\r\n              ).join('\\n');\r\n              \r\n              const sentiment = result.data.sentiment_score;\r\n              let sentimentText = '中性';\r\n              if (sentiment > 0.3) sentimentText = '积极';\r\n              else if (sentiment < -0.3) sentimentText = '消极';\r\n              \r\n              response = `以下是最新比特币相关新闻 (市场情绪：${sentimentText}, 指数：${sentiment.toFixed(2)})：\\n\\n${newsText}`;\r\n            } else {\r\n              response = '抱歉，目前无法获取比特币新闻数据。请稍后再试。';\r\n            }\r\n          } catch (e) {\r\n            console.error('获取新闻API失败:', e);\r\n            response = '抱歉，获取比特币新闻时出现问题。请稍后再试。';\r\n          }\r\n        } else {\r\n          // 如果不是新闻查询，提供一般对话回复\r\n          if (userMessage.toLowerCase().includes('你好') || userMessage.toLowerCase().includes('嗨') || userMessage.toLowerCase().includes('hi')) {\r\n            response = '您好！我是您的加密货币助手。您可以询问我比特币相关的新闻和市场动态，也可以与我聊聊其他话题。';\r\n          } else if (userMessage.toLowerCase().includes('你是谁') || userMessage.toLowerCase().includes('你能做什么')) {\r\n            response = '我是一个加密货币助手，可以为您提供比特币相关新闻和信息。您可以向我询问\"最新比特币新闻\"或\"比特币市场趋势\"等问题，我会尝试为您获取相关信息。';\r\n          } else if (userMessage.toLowerCase().includes('价格') || userMessage.toLowerCase().includes('多少钱')) {\r\n            response = '您可以在页面上方的价格图表中查看比特币的最新价格走势。如果您想了解未来价格预测，可以使用右侧的价格预测功能。';\r\n          } else if (userMessage.toLowerCase().includes('谢谢') || userMessage.toLowerCase().includes('感谢')) {\r\n            response = '不客气！如果您有其他问题，随时可以向我咨询。';\r\n          } else {\r\n            response = '我理解您想了解更多信息。如果您想获取最新的比特币新闻，可以直接询问\"最新比特币新闻\"。您也可以使用右侧的价格预测功能来预测未来价格走势。';\r\n          }\r\n        }\r\n        \r\n        // 添加AI回复\r\n        this.aiMessages.push({\r\n          role: 'ai',\r\n          content: response,\r\n          time: this.formatTime(new Date())\r\n        });\r\n      } catch (error) {\r\n        console.error('处理消息失败:', error);\r\n        this.aiMessages.push({\r\n          role: 'ai',\r\n          content: '抱歉，处理您的请求时出现了问题。请稍后重试。',\r\n          time: this.formatTime(new Date())\r\n        });\r\n      } finally {\r\n        this.aiLoading = false;\r\n        this.$nextTick(() => {\r\n          this.scrollChatToBottom('chatMessages');\r\n        });\r\n      }\r\n    },\r\n    async sendPredictionRequest() {\r\n      if (!this.predictionInputMessage.trim()) return\r\n      \r\n      // 添加用户消息\r\n      this.predictionMessages.push({\r\n        role: 'user',\r\n        content: this.predictionInputMessage,\r\n        time: this.formatTime(new Date())\r\n      })\r\n      \r\n      // 清空输入框并滚动到底部\r\n      const userMessage = this.predictionInputMessage\r\n      this.predictionInputMessage = ''\r\n      this.$nextTick(() => {\r\n        this.scrollChatToBottom('predictionMessages')\r\n      })\r\n      \r\n      this.predictionLoading = true\r\n      \r\n      try {\r\n        // 解析用户消息，确定预测天数\r\n        let days = 7 // 默认预测7天\r\n        if (userMessage.includes('3天') || userMessage.includes('三天')) {\r\n          days = 3\r\n        } else if (userMessage.includes('一周') || userMessage.includes('7天')) {\r\n          days = 7\r\n        } else if (userMessage.includes('两周') || userMessage.includes('14天')) {\r\n          days = 14\r\n        } else if (userMessage.includes('30天') || userMessage.includes('一个月')) {\r\n          days = 30\r\n        }\r\n        \r\n        // 先获取情感分析数据\r\n        let sentimentScore = 0\r\n        try {\r\n          const newsResult = await axios.get('/api/news')\r\n          if (newsResult.data && newsResult.data.sentiment_score !== undefined) {\r\n            sentimentScore = newsResult.data.sentiment_score\r\n          }\r\n        } catch (e) {\r\n          console.error('获取情感分析数据失败:', e)\r\n        }\r\n        \r\n        // 获取最新价格数据作为输入参数\r\n        let priceData = null\r\n        try {\r\n          const priceResult = await axios.get('/api/bitcoin/prices')\r\n          if (priceResult.data && priceResult.data.length > 0) {\r\n            // 使用最新的价格数据\r\n            priceData = priceResult.data[0]\r\n          }\r\n        } catch (e) {\r\n          console.error('获取价格数据失败:', e)\r\n        }\r\n        \r\n        // 调用预测API，传递所有必要参数\r\n        let predictionResult = null\r\n        try {\r\n          const params = {\r\n            days,\r\n            sentiment_score: sentimentScore\r\n          }\r\n          \r\n          // 如果有价格数据，添加到参数中\r\n          if (priceData) {\r\n            params.price_data = priceData\r\n          }\r\n          \r\n          const response = await axios.post('/api/bitcoin/predict', params)\r\n          predictionResult = response.data\r\n          \r\n          if (!predictionResult || !predictionResult.dates || !predictionResult.prices) {\r\n            throw new Error('预测结果格式不正确')\r\n          }\r\n        } catch (e) {\r\n          console.error('调用预测API失败:', e)\r\n          this.predictionMessages.push({\r\n            role: 'ai',\r\n            content: '抱歉，预测服务暂时不可用。我们的预测模型需要结合最新价格数据和新闻情感分析来提供准确的预测。请稍后再试。',\r\n            time: this.formatTime(new Date())\r\n          })\r\n          this.predictionLoading = false\r\n          return\r\n        }\r\n        \r\n        // 处理预测结果\r\n        const formattedResults = predictionResult.dates.map((date, index) => {\r\n          // 计算与当前价格的百分比变化\r\n          const currentPrice = predictionResult.current_price || 58000\r\n          const priceChange = ((predictionResult.prices[index] - currentPrice) / currentPrice * 100).toFixed(2)\r\n          const changeSymbol = priceChange >= 0 ? '+' : ''\r\n          \r\n          return `${date}: ${predictionResult.prices[index].toFixed(2)} USD (${changeSymbol}${priceChange}%)`\r\n        }).join('\\n')\r\n        \r\n        // 生成分析结论\r\n        const lastPrice = predictionResult.prices[predictionResult.prices.length - 1]\r\n        const firstPrice = predictionResult.prices[0]\r\n        const trend = lastPrice > firstPrice ? '上升' : '下降'\r\n        const confidence = Math.floor(65 + Math.random() * 20)\r\n        \r\n        // 添加情感分析结果\r\n        let sentimentInfo = ''\r\n        if (predictionResult.sentiment_score !== undefined) {\r\n          let sentimentText = '中性'\r\n          if (predictionResult.sentiment_score > 0.3) sentimentText = '积极'\r\n          else if (predictionResult.sentiment_score < -0.3) sentimentText = '消极'\r\n          \r\n          sentimentInfo = `\\n\\n市场情绪分析：${sentimentText} (${predictionResult.sentiment_score.toFixed(2)})`\r\n        } else if (sentimentScore) {\r\n          let sentimentText = '中性'\r\n          if (sentimentScore > 0.3) sentimentText = '积极'\r\n          else if (sentimentScore < -0.3) sentimentText = '消极'\r\n          \r\n          sentimentInfo = `\\n\\n市场情绪分析：${sentimentText} (${sentimentScore.toFixed(2)})`\r\n        }\r\n        \r\n        const response = `根据历史价格数据、市场情绪分析和我们的预测模型，比特币价格预测结果如下：\\n\\n${formattedResults}${sentimentInfo}\\n\\n预测趋势：${trend}\\n置信度：${confidence}%\\n\\n影响因素分析：\\n1. 当前市场整体处于${trend === '上升' ? '偏向积极' : '谨慎观望'}情绪\\n2. 技术指标显示短期内可能${trend === '上升' ? '继续上行' : '有回调压力'}\\n3. 最新消息对市场影响${trend === '上升' ? '偏正面' : '中性偏负面'}\\n\\n请注意，这只是基于历史数据的预测，实际市场可能受多种因素影响而变化。`\r\n        \r\n        // 添加AI回复\r\n        this.predictionMessages.push({\r\n          role: 'ai',\r\n          content: response,\r\n          time: this.formatTime(new Date())\r\n        })\r\n      } catch (error) {\r\n        console.error('预测请求失败:', error)\r\n        this.predictionMessages.push({\r\n          role: 'ai',\r\n          content: '抱歉，预测服务暂时不可用。请稍后重试。',\r\n          time: this.formatTime(new Date())\r\n        })\r\n      } finally {\r\n        this.predictionLoading = false\r\n        this.$nextTick(() => {\r\n          this.scrollChatToBottom('predictionMessages')\r\n        })\r\n      }\r\n    },\r\n    logout() {\r\n      this.$store.dispatch('logout')\r\n      this.$router.push('/')\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.dashboard-container {\r\n  min-height: 100vh;\r\n  background-color: #f5f7fa;\r\n}\r\n\r\n.header {\r\n  background-color: #1e1e1e;\r\n  color: white;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 0 20px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.logo {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.bitcoin-logo {\r\n  height: 30px;\r\n  margin-right: 10px;\r\n}\r\n\r\n.user-info {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.user-info span {\r\n  margin-right: 15px;\r\n}\r\n\r\n.main-content {\r\n  padding: 20px;\r\n  max-width: 1400px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.chart-card {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.chart-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.price-chart {\r\n  height: 350px;\r\n  width: 100%;\r\n}\r\n\r\n.chat-section {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(450px, 1fr));\r\n  gap: 20px;\r\n}\r\n\r\n.chat-card {\r\n  height: 500px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-height: 500px;\r\n}\r\n\r\n.chat-header {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.chat-header i {\r\n  margin-left: 8px;\r\n  color: #909399;\r\n  cursor: pointer;\r\n}\r\n\r\n.chat-messages {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 10px;\r\n  background-color: #f9f9f9;\r\n  border-radius: 4px;\r\n  margin-bottom: 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-height: 350px;\r\n}\r\n\r\n.message {\r\n  max-width: 80%;\r\n  margin-bottom: 12px;\r\n  padding: 10px;\r\n  border-radius: 10px;\r\n  position: relative;\r\n}\r\n\r\n.user-message {\r\n  align-self: flex-end;\r\n  background-color: #ecf5ff;\r\n  border: 1px solid #d9ecff;\r\n}\r\n\r\n.ai-message {\r\n  align-self: flex-start;\r\n  background-color: #f4f4f5;\r\n  border: 1px solid #e9e9eb;\r\n}\r\n\r\n.message-content {\r\n  word-wrap: break-word;\r\n  white-space: pre-line;\r\n}\r\n\r\n.message-time {\r\n  font-size: 11px;\r\n  color: #909399;\r\n  margin-top: 4px;\r\n  text-align: right;\r\n}\r\n\r\n.chat-input {\r\n  margin-top: auto;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .chat-section {\r\n    grid-template-columns: 1fr;\r\n  }\r\n}\r\n</style> "]}]}